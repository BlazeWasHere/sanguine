{"solidity/TearBridge.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{}},"solidity/TearBridge.sol:IERC20":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"solidity/TearBridge.sol:IInventoryItem":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of Inventory Items.","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"burnFrom(address,uint256)":{"details":"Burns tokens."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of Inventory Items.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"burnFrom(address,uint256)\":{\"details\":\"Burns tokens.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"IInventoryItem\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burnFrom(address,uint256)":"79cc6790","mint(address,uint256)":"40c10f19","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"solidity/TearBridge.sol:IMessageBus":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"_dstChainId","type":"uint256"},{"internalType":"bytes","name":"_options","type":"bytes"}],"name":"estimateFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes","name":"_srcAddress","type":"bytes"},{"internalType":"address","name":"_dstAddress","type":"address"},{"internalType":"uint256","name":"_gasLimit","type":"uint256"},{"internalType":"uint256","name":"_nonce","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes32","name":"_messageId","type":"bytes32"}],"name":"executeMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_receiver","type":"bytes32"},{"internalType":"uint256","name":"_dstChainId","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"bytes","name":"_options","type":"bytes"}],"name":"sendMessage","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"withdrawFee","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"estimateFee(uint256,bytes)":{"notice":"Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit"},"executeMessage(uint256,bytes,address,uint256,uint256,bytes,bytes32)":{"notice":"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain"},"sendMessage(bytes32,uint256,bytes,bytes)":{"notice":"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message."},"withdrawFee(address)":{"notice":"Withdraws message fee in the form of native gas token."}},"version":1},"developerDoc":{"kind":"dev","methods":{"estimateFee(uint256,bytes)":{"params":{"_options":"Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with."}},"executeMessage(uint256,bytes,address,uint256,uint256,bytes,bytes32)":{"params":{"_dstAddress":"Destination address that the arbitrary message will be passed to","_gasLimit":"Gas limit to be passed alongside the message, depending on the fee paid on srcChain","_message":"Arbitrary message payload to pass to the destination chain receiver","_messageId":"MessageId for uniqueness of messages (alongisde nonce)","_nonce":"Nonce from origin chain","_srcAddress":"Originating bytes address of the message sender on the srcChain","_srcChainId":"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains"}},"sendMessage(bytes32,uint256,bytes,bytes)":{"params":{"_dstChainId":"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains","_message":"The arbitrary payload to pass to the destination chain receiver","_options":"Versioned struct used to instruct relayer on how to proceed with gas limits","_receiver":"The bytes32 address of the destination contract to be called"}},"withdrawFee(address)":{"params":{"_account":"The address receiving the fee."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"_messageId\",\"type\":\"bytes32\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_receiver\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateFee(uint256,bytes)\":{\"params\":{\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\"}},\"executeMessage(uint256,bytes,address,uint256,uint256,bytes,bytes32)\":{\"params\":{\"_dstAddress\":\"Destination address that the arbitrary message will be passed to\",\"_gasLimit\":\"Gas limit to be passed alongside the message, depending on the fee paid on srcChain\",\"_message\":\"Arbitrary message payload to pass to the destination chain receiver\",\"_messageId\":\"MessageId for uniqueness of messages (alongisde nonce)\",\"_nonce\":\"Nonce from origin chain\",\"_srcAddress\":\"Originating bytes address of the message sender on the srcChain\",\"_srcChainId\":\"Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\"}},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"params\":{\"_dstChainId\":\"The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\",\"_message\":\"The arbitrary payload to pass to the destination chain receiver\",\"_options\":\"Versioned struct used to instruct relayer on how to proceed with gas limits\",\"_receiver\":\"The bytes32 address of the destination contract to be called\"}},\"withdrawFee(address)\":{\"params\":{\"_account\":\"The address receiving the fee.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateFee(uint256,bytes)\":{\"notice\":\"Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\"},\"executeMessage(uint256,bytes,address,uint256,uint256,bytes,bytes32)\":{\"notice\":\"Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\"},\"sendMessage(bytes32,uint256,bytes,bytes)\":{\"notice\":\"Sends a message to a receiving contract address on another chain. Sender must make sure that the message is unique and not a duplicate message.\"},\"withdrawFee(address)\":{\"notice\":\"Withdraws message fee in the form of native gas token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"IMessageBus\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"estimateFee(uint256,bytes)":"5da6d2c4","executeMessage(uint256,bytes,address,uint256,uint256,bytes,bytes32)":"21730efc","sendMessage(bytes32,uint256,bytes,bytes)":"ac8a4c1b","withdrawFee(address)":"1ac3ddeb"}},"solidity/TearBridge.sol:ISynMessagingReceiver":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes32","name":"_srcAddress","type":"bytes32"},{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessage","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"notice":"Called by MessageBus"}},"version":1},"developerDoc":{"kind":"dev","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"details":"MUST be permissioned to trusted source apps via trustedRemote","params":{"_executor":"Address who called the MessageBus execution function","_message":"Arbitrary message bytes originated from and encoded by the source app contract","_srcAddress":"The bytes32 address of the source app contract","_srcChainId":"The source chain ID where the transfer is originated from"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"MUST be permissioned to trusted source apps via trustedRemote\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Called by MessageBus\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"ISynMessagingReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"executeMessage(bytes32,uint256,bytes,address)":"a6060871"}},"solidity/TearBridge.sol:Ownable":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/TearBridge.sol:SynMessagingReceiver":{"code":"0x","runtime-code":"0x","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_srcAddress","type":"bytes32"}],"name":"SetTrustedRemote","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_srcAddress","type":"bytes32"},{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"name":"getTrustedRemote","outputs":[{"internalType":"bytes32","name":"trustedRemote","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"messageBus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"}],"name":"setMessageBus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes32","name":"_srcAddress","type":"bytes32"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"notice":"Executes a message called by MessageBus (MessageBusReceiver)"}},"version":1},"developerDoc":{"kind":"dev","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"details":"Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp","params":{"_executor":"Address who called the MessageBus execution function","_message":"Arbitrary message bytes originated from and encoded by the source app contract","_srcAddress":"The bytes32 address of the source app contract","_srcChainId":"The source chain ID where the transfer is originated from"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trustedRemote\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Executes a message called by MessageBus (MessageBusReceiver)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"SynMessagingReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"executeMessage(bytes32,uint256,bytes,address)":"a6060871","getTrustedRemote(uint256)":"84a12b0f","messageBus()":"a1a227fa","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setMessageBus(address)":"547cad12","setTrustedRemote(uint256,bytes32)":"bd3583ae","transferOwnership(address)":"f2fde38b"}},"solidity/TearBridge.sol:TearBridge":{"code":"","runtime-code":"0x6080604052600436106100c75760003560e01c8063a606087111610074578063c0e07f281161004e578063c0e07f2814610243578063f2fde38b14610259578063f9ecc6f51461027957600080fd5b8063a6060871146101cf578063acac4bdd146101ef578063bd3583ae1461022357600080fd5b806384a12b0f116100a557806384a12b0f146101165780638da5cb5b14610156578063a1a227fa146101a257600080fd5b8063547cad12146100cc578063715018a6146100ee5780638273190314610103575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004610ca4565b610299565b005b3480156100fa57600080fd5b506100ec610366565b6100ec610111366004610cc1565b6103f3565b34801561012257600080fd5b50610143610131366004610ce3565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b34801561016257600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161014d565b3480156101ae57600080fd5b5060015461017d9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101db57600080fd5b506100ec6101ea366004610cfc565b61056d565b3480156101fb57600080fd5b5061017d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561022f57600080fd5b506100ec61023e366004610cc1565b6106af565b34801561024f57600080fd5b5061014360035481565b34801561026557600080fd5b506100ec610274366004610ca4565b61077f565b34801561028557600080fd5b506100ec610294366004610ce3565b6108af565b60005473ffffffffffffffffffffffffffffffffffffffff16331461031f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146103e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b6103f16000610935565b565b6040517f79cc679000000000000000000000000000000000000000000000000000000000815233600482015260248101839052829082907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906379cc679090604401600060405180830381600087803b15801561048557600080fd5b505af1158015610499573d6000803e3d6000fd5b50505060008281526002602090815260409182902054825180840184523380825290830187815284519384019190915251828401528251808303840181526060830184526003547e0100000000000000000000000000000000000000000000000000000000000060808501526082808501919091528451808503909101815260a2909301909352925061052e838584846109aa565b60405185815233907fe82273e05845454dcf88823968e5c722028bc4cb17ed03bdc06eaa32cc58ee66906020015b60405180910390a250505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146105ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f63616c6c6572206973206e6f74206d65737361676520627573000000000000006044820152606401610316565b6000848152600260205260409020548514610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420736f757263652073656e64696e67206170700000000000006044820152606401610316565b6106a8858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250610b46915050565b5050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b60008281526002602090815260409182902083905581518481529081018390527f642e74356c0610a9f944fb1a2d88d2fb82c6b74921566eee8bc0f9bb30f74f03910160405180910390a15050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610800576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b73ffffffffffffffffffffffffffffffffffffffff81166108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610316565b6108ac81610935565b50565b60005473ffffffffffffffffffffffffffffffffffffffff163314610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610316565b600355565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008381526002602052604090205480610a20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4e6f2072656d6f7465206170702073657420666f722064737420636861696e006044820152606401610316565b848114610aaf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f5265636569766572206973206e6f7420696e20747275737465642072656d6f7460448201527f65206170707300000000000000000000000000000000000000000000000000006064820152608401610316565b6001546040517fac8a4c1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063ac8a4c1b903490610b0d908990899089908990600401610e02565b6000604051808303818588803b158015610b2657600080fd5b505af1158015610b3a573d6000803e3d6000fd5b50505050505050505050565b6000610b5183610c51565b805160208201516040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808416600483015260248201839052939450919290917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f1990604401600060405180830381600087803b158015610bf157600080fd5b505af1158015610c05573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff167f07b815cd29685803e7213231371fa19ce2e23221109bf847d949305e6b7464a48260405161055c91815260200190565b6040805180820190915260008082526020820152600082806020019051810190610c7b9190610e3e565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146108ac57600080fd5b600060208284031215610cb657600080fd5b8135610c7b81610c82565b60008060408385031215610cd457600080fd5b50508035926020909101359150565b600060208284031215610cf557600080fd5b5035919050565b600080600080600060808688031215610d1457600080fd5b8535945060208601359350604086013567ffffffffffffffff80821115610d3a57600080fd5b818801915088601f830112610d4e57600080fd5b813581811115610d5d57600080fd5b896020828501011115610d6f57600080fd5b6020830195508094505050506060860135610d8981610c82565b809150509295509295909350565b6000815180845260005b81811015610dbd57602081850181015186830182015201610da1565b81811115610dcf576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b848152836020820152608060408201526000610e216080830185610d97565b8281036060840152610e338185610d97565b979650505050505050565b600060408284031215610e5057600080fd5b6040516040810181811067ffffffffffffffff82111715610e9a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040528251610ea881610c82565b8152602092830151928101929092525091905056fea264697066735822122094da93b3685da6b04d46164f0f5803abb12b1d059a3779e897e985ed2372344864736f6c634300080d0033","info":{"source":"\n\n// \ninterface ISynMessagingReceiver {\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    // mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    /**\n     * @notice Called by MessageBus\n     * @dev MUST be permissioned to trusted source apps via trustedRemote\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external;\n}\n\n// \ninterface IMessageBus {\n    /**\n     * @notice Sends a message to a receiving contract address on another chain.\n     * Sender must make sure that the message is unique and not a duplicate message.\n     * @param _receiver The bytes32 address of the destination contract to be called\n     * @param _dstChainId The destination chain ID - typically, standard EVM chain ID, but differs on nonEVM chains\n     * @param _message The arbitrary payload to pass to the destination chain receiver\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits\n     */\n    function sendMessage(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message,\n        bytes calldata _options\n    ) external payable;\n\n    /**\n     * @notice Relayer executes messages through an authenticated method to the destination receiver based on the originating transaction on source chain\n     * @param _srcChainId Originating chain ID - typically a standard EVM chain ID, but may refer to a Synapse-specific chain ID on nonEVM chains\n     * @param _srcAddress Originating bytes address of the message sender on the srcChain\n     * @param _dstAddress Destination address that the arbitrary message will be passed to\n     * @param _gasLimit Gas limit to be passed alongside the message, depending on the fee paid on srcChain\n     * @param _nonce Nonce from origin chain\n     * @param _message Arbitrary message payload to pass to the destination chain receiver\n     * @param _messageId MessageId for uniqueness of messages (alongisde nonce)\n     */\n    function executeMessage(\n        uint256 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint256 _gasLimit,\n        uint256 _nonce,\n        bytes calldata _message,\n        bytes32 _messageId\n    ) external;\n\n    /**\n     * @notice Returns srcGasToken fee to charge in wei for the cross-chain message based on the gas limit\n     * @param _options Versioned struct used to instruct relayer on how to proceed with gas limits. Contains data on gas limit to submit tx with.\n     */\n    function estimateFee(uint256 _dstChainId, bytes calldata _options) external returns (uint256);\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     */\n    function withdrawFee(address _account) external;\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// \nabstract contract SynMessagingReceiver is ISynMessagingReceiver, Ownable {\n    address public messageBus;\n\n    // Maps chain ID to the bytes32 trusted addresses allowed to be source senders\n    mapping(uint256 =\u003e bytes32) internal trustedRemoteLookup;\n\n    event SetTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress);\n\n    /**\n     * @notice Executes a message called by MessageBus (MessageBusReceiver)\n     * @dev Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\n     * @param _srcAddress The bytes32 address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external {\n        // Must be called by the MessageBus/MessageBus for security\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        // Must also be from a trusted source app\n        require(_srcAddress == trustedRemoteLookup[_srcChainId], \"Invalid source sending app\");\n\n        _handleMessage(_srcAddress, _srcChainId, _message, _executor);\n    }\n\n    // Logic here handling messsage contents\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal virtual;\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal virtual {\n        require(trustedRemoteLookup[_dstChainId] != bytes32(0), \"Receiver not trusted remote\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    //** Config Functions */\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n    }\n\n    // allow owner to set trusted addresses allowed to be source senders\n    function setTrustedRemote(uint256 _srcChainId, bytes32 _srcAddress) external onlyOwner {\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\n    }\n\n    //** View functions */\n    function getTrustedRemote(uint256 _chainId) external view returns (bytes32 trustedRemote) {\n        return trustedRemoteLookup[_chainId];\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// \n/**\n * @dev Interface of Inventory Items.\n */\ninterface IInventoryItem is IERC20 {\n    /**\n     * @dev Burns tokens.\n     */\n    function burnFrom(address from, uint256 amount) external;\n\n    function mint(address to, uint256 amount) external;\n}\n\n// \ncontract TearBridge is SynMessagingReceiver {\n    address public immutable gaiaTears;\n    uint256 public msgGasLimit;\n\n    struct MessageFormat {\n        address dstUser;\n        uint256 dstTearAmount;\n    }\n\n    event GaiaSent(address indexed dstUser, uint256 arrivalChainId);\n    event GaiaArrived(address indexed dstUser, uint256 arrivalChainId);\n\n    constructor(address _messageBus, address _gaiaTear) {\n        messageBus = _messageBus;\n        gaiaTears = _gaiaTear;\n    }\n\n    function _createMessage(address _dstUserAddress, uint256 _dstTearAmount) internal pure returns (bytes memory) {\n        // create the message here from the nested struct\n        MessageFormat memory msgFormat = MessageFormat({dstUser: _dstUserAddress, dstTearAmount: _dstTearAmount});\n        return abi.encode(msgFormat);\n    }\n\n    function _decodeMessage(bytes memory _message) internal pure returns (MessageFormat memory) {\n        MessageFormat memory decodedMessage = abi.decode(_message, (MessageFormat));\n        return decodedMessage;\n    }\n\n    function _createOptions() internal view returns (bytes memory) {\n        return abi.encodePacked(uint16(1), msgGasLimit);\n    }\n\n    function sendTear(uint256 _tearsAmount, uint256 _dstChainId) external payable {\n        uint256 tearsAmount = _tearsAmount;\n        uint256 dstChainId = _dstChainId;\n        // Tears now burnt, equivalent amount will be bridged to dstChainId\n        IInventoryItem(gaiaTears).burnFrom(msg.sender, tearsAmount);\n\n        bytes32 receiver = trustedRemoteLookup[dstChainId];\n        bytes memory message = _createMessage(msg.sender, tearsAmount);\n        bytes memory options = _createOptions();\n\n        _send(receiver, dstChainId, message, options);\n        emit GaiaSent(msg.sender, tearsAmount);\n    }\n\n    // Function called by executeMessage() - handleMessage will handle the gaia tear mint\n    // executeMessage() handles permissioning checks\n    function _handleMessage(\n        bytes32 _srcAddress,\n        uint256 _srcChainId,\n        bytes memory _message,\n        address _executor\n    ) internal override {\n        MessageFormat memory passedMsg = _decodeMessage(_message);\n        address dstUser = passedMsg.dstUser;\n        uint256 dstTearAmount = passedMsg.dstTearAmount;\n        IInventoryItem(gaiaTears).mint(dstUser, dstTearAmount);\n        emit GaiaArrived(dstUser, dstTearAmount);\n    }\n\n    function _send(\n        bytes32 _receiver,\n        uint256 _dstChainId,\n        bytes memory _message,\n        bytes memory _options\n    ) internal override {\n        bytes32 trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote != bytes32(0), \"No remote app set for dst chain\");\n        require(trustedRemote == _receiver, \"Receiver is not in trusted remote apps\");\n        IMessageBus(messageBus).sendMessage{value: msg.value}(_receiver, _dstChainId, _message, _options);\n    }\n\n    function setMsgGasLimit(uint256 _msgGasLimit) external onlyOwner {\n        msgGasLimit = _msgGasLimit;\n    }\n}","language":"Solidity","languageVersion":"0.8.13","compilerVersion":"0.8.13","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"11911:3005:0:-:0;;;12266:124;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4848:32;3887:10;4848:18;:32::i;:::-;12328:10;:24;;-1:-1:-1;;;;;;12328:24:0;-1:-1:-1;;;;;12328:24:0;;;;;;12362:21;;;11911:3005;;6197:187;6270:16;6289:6;;-1:-1:-1;;;;;6305:17:0;;;-1:-1:-1;;;;;;6305:17:0;;;;;;6337:40;;6289:6;;;;;;;6337:40;;6270:16;6337:40;6260:124;6197:187;:::o;14:177:1:-;93:13;;-1:-1:-1;;;;;135:31:1;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:293::-;275:6;283;336:2;324:9;315:7;311:23;307:32;304:52;;;352:1;349;342:12;304:52;375:40;405:9;375:40;:::i;:::-;365:50;;434:49;479:2;468:9;464:18;434:49;:::i;:::-;424:59;;196:293;;;;;:::o;:::-;11911:3005:0;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"11911:3005:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8374:102;;;;;;;;;;-1:-1:-1;8374:102:0;;;;;:::i;:::-;;:::i;:::-;;5595:101;;;;;;;;;;;;;:::i;13084:602::-;;;;;;:::i;:::-;;:::i;8795:143::-;;;;;;;;;;-1:-1:-1;8795:143:0;;;;;:::i;:::-;8862:21;8902:29;;;:19;:29;;;;;;;8795:143;;;;1009:25:1;;;997:2;982:18;8795:143:0;;;;;;;;4963:85;;;;;;;;;;-1:-1:-1;5009:7:0;5035:6;;;4963:85;;;1221:42:1;1209:55;;;1191:74;;1179:2;1164:18;4963:85:0;1045:226:1;6471:25:0;;;;;;;;;;-1:-1:-1;6471:25:0;;;;;;;;7231:522;;;;;;;;;;-1:-1:-1;7231:522:0;;;;;:::i;:::-;;:::i;11961:34::-;;;;;;;;;;;;;;;8555:207;;;;;;;;;;-1:-1:-1;8555:207:0;;;;;:::i;:::-;;:::i;12001:26::-;;;;;;;;;;;;;;;;5845:198;;;;;;;;;;-1:-1:-1;5845:198:0;;;;;:::i;:::-;;:::i;14806:108::-;;;;;;;;;;-1:-1:-1;14806:108:0;;;;;:::i;:::-;;:::i;8374:102::-;5009:7;5035:6;5175:23;5035:6;3887:10;5175:23;5167:68;;;;;;;2781:2:1;5167:68:0;;;2763:21:1;;;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2911:18;;5167:68:0;;;;;;;;;8445:10:::1;:24:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;8374:102::o;5595:101::-;5009:7;5035:6;5175:23;5035:6;3887:10;5175:23;5167:68;;;;;;;2781:2:1;5167:68:0;;;2763:21:1;;;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2911:18;;5167:68:0;2579:356:1;5167:68:0;5659:30:::1;5686:1;5659:18;:30::i;:::-;5595:101::o:0;13084:602::-;13334:59;;;;;13369:10;13334:59;;;3114:74:1;3204:18;;;3197:34;;;13194:12:0;;13237:11;;13349:9;13334:34;;;;;3087:18:1;;13334:59:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;13404:16:0;13423:31;;;:19;:31;;;;;;;;;;12607:72;;;;;;;13502:10;12607:72;;;;;;;;;12696:21;;;;;4817:81:1;;;;4936:24;4914:20;;;4907:54;12696:21:0;;;;;;;;;12492:12;4790:18:1;;12696:21:0;;13059:11;;5143:16:1;13031:40:0;;;5127:102:1;5245:11;;;;5238:27;;;;13031:40:0;;;;;;;;;;5281:12:1;;;;13031:40:0;;;13423:31;-1:-1:-1;13586:45:0;13423:31;;12696:21;13031:40;13586:5;:45::i;:::-;13646:33;;1009:25:1;;;13655:10:0;;13646:33;;997:2:1;982:18;13646:33:0;;;;;;;;13162:524;;;;;13084:602;;:::o;7231:522::-;7488:10;;;;7474;:24;7466:62;;;;;;;3444:2:1;7466:62:0;;;3426:21:1;3483:2;3463:18;;;3456:30;3522:27;3502:18;;;3495:55;3567:18;;7466:62:0;3242:349:1;7466:62:0;7611:32;;;;:19;:32;;;;;;7596:47;;7588:86;;;;;;;3798:2:1;7588:86:0;;;3780:21:1;3837:2;3817:18;;;3810:30;3876:28;3856:18;;;3849:56;3922:18;;7588:86:0;3596:350:1;7588:86:0;7685:61;7700:11;7713;7726:8;;7685:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7736:9:0;;-1:-1:-1;7685:14:0;;-1:-1:-1;;7685:61:0:i;:::-;7231:522;;;;;:::o;8555:207::-;5009:7;5035:6;5175:23;5035:6;3887:10;5175:23;5167:68;;;;;;;2781:2:1;5167:68:0;;;2763:21:1;;;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2911:18;;5167:68:0;2579:356:1;5167:68:0;8652:32:::1;::::0;;;:19:::1;:32;::::0;;;;;;;;:46;;;8713:42;;4125:25:1;;;4166:18;;;4159:34;;;8713:42:0::1;::::0;4098:18:1;8713:42:0::1;;;;;;;8555:207:::0;;:::o;5845:198::-;5009:7;5035:6;5175:23;5035:6;3887:10;5175:23;5167:68;;;;;;;2781:2:1;5167:68:0;;;2763:21:1;;;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2911:18;;5167:68:0;2579:356:1;5167:68:0;5933:22:::1;::::0;::::1;5925:73;;;::::0;::::1;::::0;;4406:2:1;5925:73:0::1;::::0;::::1;4388:21:1::0;4445:2;4425:18;;;4418:30;4484:34;4464:18;;;4457:62;4555:8;4535:18;;;4528:36;4581:19;;5925:73:0::1;4204:402:1::0;5925:73:0::1;6008:28;6027:8;6008:18;:28::i;:::-;5845:198:::0;:::o;14806:108::-;5009:7;5035:6;5175:23;5035:6;3887:10;5175:23;5167:68;;;;;;;2781:2:1;5167:68:0;;;2763:21:1;;;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2911:18;;5167:68:0;2579:356:1;5167:68:0;14881:11:::1;:26:::0;14806:108::o;6197:187::-;6270:16;6289:6;;;6305:17;;;;;;;;;;6337:40;;6289:6;;;;;;;6337:40;;6270:16;6337:40;6260:124;6197:187;:::o;14295:505::-;14462:21;14486:32;;;:19;:32;;;;;;;14528:71;;;;;;;5506:2:1;14528:71:0;;;5488:21:1;5545:2;5525:18;;;5518:30;5584:33;5564:18;;;5557:61;5635:18;;14528:71:0;5304:355:1;14528:71:0;14634:9;14617:13;:26;14609:77;;;;;;;5866:2:1;14609:77:0;;;5848:21:1;5905:2;5885:18;;;5878:30;5944:34;5924:18;;;5917:62;6015:8;5995:18;;;5988:36;6041:19;;14609:77:0;5664:402:1;14609:77:0;14708:10;;14696:97;;;;;14708:10;;;;;14696:35;;14739:9;;14696:97;;14750:9;;14761:11;;14774:8;;14784;;14696:97;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14452:348;14295:505;;;;:::o;13835:454::-;14009:30;14042:24;14057:8;14042:14;:24::i;:::-;14094:17;;14145:23;;;;14178:54;;;;;:30;3132:55:1;;;14178:54:0;;;3114:74:1;3204:18;;;3197:34;;;14094:17:0;;-1:-1:-1;14094:17:0;;14145:23;;14193:9;14178:30;;;;;;3087:18:1;;14178:54:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14259:7;14247:35;;;14268:13;14247:35;;;;1009:25:1;;997:2;982:18;;863:177;12730:215:0;-1:-1:-1;;;;;;;;;;;;;;;;;12832:35:0;12881:8;12870:37;;;;;;;;;;;;:::i;:::-;12832:75;12730:215;-1:-1:-1;;;12730:215:0:o;14:154:1:-;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:247;232:6;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;340:9;327:23;359:31;384:5;359:31;:::i;425:248::-;493:6;501;554:2;542:9;533:7;529:23;525:32;522:52;;;570:1;567;560:12;522:52;-1:-1:-1;;593:23:1;;;663:2;648:18;;;635:32;;-1:-1:-1;425:248:1:o;678:180::-;737:6;790:2;778:9;769:7;765:23;761:32;758:52;;;806:1;803;796:12;758:52;-1:-1:-1;829:23:1;;678:180;-1:-1:-1;678:180:1:o;1276:863::-;1373:6;1381;1389;1397;1405;1458:3;1446:9;1437:7;1433:23;1429:33;1426:53;;;1475:1;1472;1465:12;1426:53;1511:9;1498:23;1488:33;;1568:2;1557:9;1553:18;1540:32;1530:42;;1623:2;1612:9;1608:18;1595:32;1646:18;1687:2;1679:6;1676:14;1673:34;;;1703:1;1700;1693:12;1673:34;1741:6;1730:9;1726:22;1716:32;;1786:7;1779:4;1775:2;1771:13;1767:27;1757:55;;1808:1;1805;1798:12;1757:55;1848:2;1835:16;1874:2;1866:6;1863:14;1860:34;;;1890:1;1887;1880:12;1860:34;1935:7;1930:2;1921:6;1917:2;1913:15;1909:24;1906:37;1903:57;;;1956:1;1953;1946:12;1903:57;1987:2;1983;1979:11;1969:21;;2009:6;1999:16;;;;;2065:2;2054:9;2050:18;2037:32;2078:31;2103:5;2078:31;:::i;:::-;2128:5;2118:15;;;1276:863;;;;;;;;:::o;6071:530::-;6112:3;6150:5;6144:12;6177:6;6172:3;6165:19;6202:1;6212:162;6226:6;6223:1;6220:13;6212:162;;;6288:4;6344:13;;;6340:22;;6334:29;6316:11;;;6312:20;;6305:59;6241:12;6212:162;;;6392:6;6389:1;6386:13;6383:87;;;6458:1;6451:4;6442:6;6437:3;6433:16;6429:27;6422:38;6383:87;-1:-1:-1;6515:2:1;6503:15;6520:66;6499:88;6490:98;;;;6590:4;6486:109;;6071:530;-1:-1:-1;;6071:530:1:o;6606:521::-;6855:6;6844:9;6837:25;6898:6;6893:2;6882:9;6878:18;6871:34;6941:3;6936:2;6925:9;6921:18;6914:31;6818:4;6968:45;7008:3;6997:9;6993:19;6985:6;6968:45;:::i;:::-;7061:9;7053:6;7049:22;7044:2;7033:9;7029:18;7022:50;7089:32;7114:6;7106;7089:32;:::i;:::-;7081:40;6606:521;-1:-1:-1;;;;;;;6606:521:1:o;7132:727::-;7232:6;7285:2;7273:9;7264:7;7260:23;7256:32;7253:52;;;7301:1;7298;7291:12;7253:52;7334:2;7328:9;7376:2;7368:6;7364:15;7445:6;7433:10;7430:22;7409:18;7397:10;7394:34;7391:62;7388:242;;;7486:77;7483:1;7476:88;7587:4;7584:1;7577:15;7615:4;7612:1;7605:15;7388:242;7646:2;7639:22;7683:16;;7708:31;7683:16;7708:31;:::i;:::-;7748:21;;7823:2;7808:18;;;7802:25;7785:15;;;7778:50;;;;-1:-1:-1;7755:6:1;7132:727;-1:-1:-1;7132:727:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"},{"internalType":"address","name":"_gaiaTear","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dstUser","type":"address"},{"indexed":false,"internalType":"uint256","name":"arrivalChainId","type":"uint256"}],"name":"GaiaArrived","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"dstUser","type":"address"},{"indexed":false,"internalType":"uint256","name":"arrivalChainId","type":"uint256"}],"name":"GaiaSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"_srcAddress","type":"bytes32"}],"name":"SetTrustedRemote","type":"event"},{"inputs":[{"internalType":"bytes32","name":"_srcAddress","type":"bytes32"},{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes","name":"_message","type":"bytes"},{"internalType":"address","name":"_executor","type":"address"}],"name":"executeMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"gaiaTears","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_chainId","type":"uint256"}],"name":"getTrustedRemote","outputs":[{"internalType":"bytes32","name":"trustedRemote","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"messageBus","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"msgGasLimit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_tearsAmount","type":"uint256"},{"internalType":"uint256","name":"_dstChainId","type":"uint256"}],"name":"sendTear","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_messageBus","type":"address"}],"name":"setMessageBus","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_msgGasLimit","type":"uint256"}],"name":"setMsgGasLimit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_srcChainId","type":"uint256"},{"internalType":"bytes32","name":"_srcAddress","type":"bytes32"}],"name":"setTrustedRemote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"notice":"Executes a message called by MessageBus (MessageBusReceiver)"}},"version":1},"developerDoc":{"kind":"dev","methods":{"executeMessage(bytes32,uint256,bytes,address)":{"details":"Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp","params":{"_executor":"Address who called the MessageBus execution function","_message":"Arbitrary message bytes originated from and encoded by the source app contract","_srcAddress":"The bytes32 address of the source app contract","_srcChainId":"The source chain ID where the transfer is originated from"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaiaTear\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalChainId\",\"type\":\"uint256\"}],\"name\":\"GaiaArrived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dstUser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"arrivalChainId\",\"type\":\"uint256\"}],\"name\":\"GaiaSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaiaTears\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getTrustedRemote\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trustedRemote\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tearsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dstChainId\",\"type\":\"uint256\"}],\"name\":\"sendTear\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_msgGasLimit\",\"type\":\"uint256\"}],\"name\":\"setMsgGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_srcAddress\",\"type\":\"bytes32\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"details\":\"Must be called by MessageBug \u0026 sent from src chain by a trusted srcApp\",\"params\":{\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_srcAddress\":\"The bytes32 address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessage(bytes32,uint256,bytes,address)\":{\"notice\":\"Executes a message called by MessageBus (MessageBusReceiver)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TearBridge.sol\":\"TearBridge\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TearBridge.sol\":{\"keccak256\":\"0x8ee478b51534e47acaf1194401eed5a9c03e2ba25da5ce181c3e3c1f46c100e6\",\"urls\":[\"bzz-raw://793eca77bc1c9e63c0b06183c7c9c0498425353f190b56006aa84577459d8c2e\",\"dweb:/ipfs/QmdoV2KVeP6sfLCqsyJeUmjkJW2Y8EyxEMZzJ5EDQTjr3Q\"]}},\"version\":1}"},"hashes":{"executeMessage(bytes32,uint256,bytes,address)":"a6060871","gaiaTears()":"acac4bdd","getTrustedRemote(uint256)":"84a12b0f","messageBus()":"a1a227fa","msgGasLimit()":"c0e07f28","owner()":"8da5cb5b","renounceOwnership()":"715018a6","sendTear(uint256,uint256)":"82731903","setMessageBus(address)":"547cad12","setMsgGasLimit(uint256)":"f9ecc6f5","setTrustedRemote(uint256,bytes32)":"bd3583ae","transferOwnership(address)":"f2fde38b"}}}