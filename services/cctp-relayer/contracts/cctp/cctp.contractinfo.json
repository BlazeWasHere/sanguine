{"solidity/SynapseCCTP.sol:Address":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd1790f715b9503832d7cbd531a84f9ba1d192821e322c245940712f589b2ec564736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dd1790f715b9503832d7cbd531a84f9ba1d192821e322c245940712f589b2ec564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"25948:8061:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;25948:8061:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"25948:8061:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"Address\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:IERC20":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"solidity/SynapseCCTP.sol:IMessageTransmitter":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextAvailableNonce","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"receiveMessage","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes32","name":"destinationCaller","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"name":"sendMessageWithCaller","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"receiveMessage(bytes,bytes)":{"notice":"Receives an incoming message, validating the header and passing the body to application-specific handler."},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain, with a specified caller on the destination domain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"receiveMessage(bytes,bytes)":{"params":{"message":"The message raw bytes","signature":"The message signature"},"returns":{"success":"bool, true if successful"}},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.","params":{"destinationCaller":"caller on the destination domain, as bytes32","destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAvailableNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The message raw bytes\",\"signature\":\"The message signature\"},\"returns\":{\"success\":\"bool, true if successful\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes,bytes)\":{\"notice\":\"Receives an incoming message, validating the header and passing the body to application-specific handler.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"IMessageTransmitter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"localDomain()":"8d3638f4","nextAvailableNonce()":"8371744e","receiveMessage(bytes,bytes)":"57ecfd28","sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":"f7259a75"}},"solidity/SynapseCCTP.sol:ISynapseCCTP":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint32","name":"requestVersion","type":"uint32"},{"internalType":"bytes","name":"formattedRequest","type":"bytes"}],"name":"receiveCircleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"burnToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"requestVersion","type":"uint32"},{"internalType":"bytes","name":"swapParams","type":"bytes"}],"name":"sendCircleToken","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"receiveCircleToken(bytes,bytes,uint32,bytes)":{"notice":"Receive  Circle token supported by CCTP with the request for the action to take."},"sendCircleToken(address,uint256,address,uint256,uint32,bytes)":{"notice":"Send a Circle token supported by CCTP to a given chain with the request for the action to take on the destination chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"receiveCircleToken(bytes,bytes,uint32,bytes)":{"details":"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on this chain.","params":{"formattedRequest":"Formatted request for the action to take on this chain","message":"Message raw bytes emitted by CCTP MessageTransmitter on origin chain","requestVersion":"Version of the request format","signature":"Circle's attestation for the message obtained from Circle's API"}},"sendCircleToken(address,uint256,address,uint256,uint32,bytes)":{"details":"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on the destination chain. `chainId` refers to value from EIP-155 (block.chainid).","params":{"amount":"Amount of tokens to burn","burnToken":"Address of Circle token to burn","chainId":"Chain ID of the destination chain","recipient":"Recipient of the tokens on destination chain","requestVersion":"Version of the request format","swapParams":"Swap parameters for the action to take on the destination chain (could be empty)"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"formattedRequest\",\"type\":\"bytes\"}],\"name\":\"receiveCircleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"swapParams\",\"type\":\"bytes\"}],\"name\":\"sendCircleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveCircleToken(bytes,bytes,uint32,bytes)\":{\"details\":\"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on this chain.\",\"params\":{\"formattedRequest\":\"Formatted request for the action to take on this chain\",\"message\":\"Message raw bytes emitted by CCTP MessageTransmitter on origin chain\",\"requestVersion\":\"Version of the request format\",\"signature\":\"Circle's attestation for the message obtained from Circle's API\"}},\"sendCircleToken(address,uint256,address,uint256,uint32,bytes)\":{\"details\":\"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on the destination chain. `chainId` refers to value from EIP-155 (block.chainid).\",\"params\":{\"amount\":\"Amount of tokens to burn\",\"burnToken\":\"Address of Circle token to burn\",\"chainId\":\"Chain ID of the destination chain\",\"recipient\":\"Recipient of the tokens on destination chain\",\"requestVersion\":\"Version of the request format\",\"swapParams\":\"Swap parameters for the action to take on the destination chain (could be empty)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveCircleToken(bytes,bytes,uint32,bytes)\":{\"notice\":\"Receive  Circle token supported by CCTP with the request for the action to take.\"},\"sendCircleToken(address,uint256,address,uint256,uint32,bytes)\":{\"notice\":\"Send a Circle token supported by CCTP to a given chain with the request for the action to take on the destination chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"ISynapseCCTP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"receiveCircleToken(bytes,bytes,uint32,bytes)":"4a5ae51d","sendCircleToken(address,uint256,address,uint256,uint32,bytes)":"304ddb4c"}},"solidity/SynapseCCTP.sol:ITokenMessenger":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"mintRecipient","type":"bytes32"},{"internalType":"address","name":"burnToken","type":"address"},{"internalType":"bytes32","name":"destinationCaller","type":"bytes32"}],"name":"depositForBurnWithCaller","outputs":[{"internalType":"uint64","name":"nonce","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"bytes32","name":"sender","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"name":"handleReceiveMessage","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"localMessageTransmitter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localMinter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)":{"notice":"Deposits and burns tokens from sender to be minted on destination domain. The mint on the destination domain must be called by `destinationCaller`. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard depositForBurn() should be preferred for use cases where a specific destination caller is not required. Emits a `DepositForBurn` event."},"handleReceiveMessage(uint32,bytes32,bytes)":{"notice":"Handles an incoming message received by the local MessageTransmitter, and takes the appropriate action. For a burn message, mints the associated token to the requested recipient on the local domain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)":{"details":"reverts if: - given destinationCaller is zero address - given burnToken is not supported - given destinationDomain has no TokenMessenger registered - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance to this contract is less than `amount`. - burn() reverts. For example, if `amount` is 0. - MessageTransmitter returns false or reverts.","params":{"amount":"amount of tokens to burn","burnToken":"address of contract to burn deposited tokens, on local domain","destinationCaller":"caller on the destination domain, as bytes32","destinationDomain":"destination domain","mintRecipient":"address of mint recipient on destination domain"},"returns":{"nonce":"unique nonce reserved by message"}},"handleReceiveMessage(uint32,bytes32,bytes)":{"details":"Validates the local sender is the local MessageTransmitter, and the remote sender is a registered remote TokenMessenger for `remoteDomain`.","params":{"messageBody":"The message body bytes.","remoteDomain":"The domain where the message originated from.","sender":"The sender of the message (remote TokenMessenger)."},"returns":{"success":"Bool, true if successful."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"mintRecipient\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"}],\"name\":\"depositForBurnWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"handleReceiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localMessageTransmitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)\":{\"details\":\"reverts if: - given destinationCaller is zero address - given burnToken is not supported - given destinationDomain has no TokenMessenger registered - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance to this contract is less than `amount`. - burn() reverts. For example, if `amount` is 0. - MessageTransmitter returns false or reverts.\",\"params\":{\"amount\":\"amount of tokens to burn\",\"burnToken\":\"address of contract to burn deposited tokens, on local domain\",\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"destination domain\",\"mintRecipient\":\"address of mint recipient on destination domain\"},\"returns\":{\"nonce\":\"unique nonce reserved by message\"}},\"handleReceiveMessage(uint32,bytes32,bytes)\":{\"details\":\"Validates the local sender is the local MessageTransmitter, and the remote sender is a registered remote TokenMessenger for `remoteDomain`.\",\"params\":{\"messageBody\":\"The message body bytes.\",\"remoteDomain\":\"The domain where the message originated from.\",\"sender\":\"The sender of the message (remote TokenMessenger).\"},\"returns\":{\"success\":\"Bool, true if successful.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)\":{\"notice\":\"Deposits and burns tokens from sender to be minted on destination domain. The mint on the destination domain must be called by `destinationCaller`. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard depositForBurn() should be preferred for use cases where a specific destination caller is not required. Emits a `DepositForBurn` event.\"},\"handleReceiveMessage(uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message received by the local MessageTransmitter, and takes the appropriate action. For a burn message, mints the associated token to the requested recipient on the local domain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"ITokenMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)":"f856ddb6","handleReceiveMessage(uint32,bytes32,bytes)":"96abeb70","localMessageTransmitter()":"2c121921","localMinter()":"cb75c11c"}},"solidity/SynapseCCTP.sol:ITokenMinter":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"burnToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"bytes32","name":"remoteToken","type":"bytes32"}],"name":"getLocalToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"sourceDomain","type":"uint32"},{"internalType":"bytes32","name":"burnToken","type":"bytes32"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[{"internalType":"address","name":"mintToken","type":"address"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"burn(address,uint256)":{"notice":"Burn tokens owned by this ITokenMinter."},"getLocalToken(uint32,bytes32)":{"notice":"Get the local token associated with the given remote domain and token."},"mint(uint32,bytes32,address,uint256)":{"notice":"Mints `amount` of local tokens corresponding to the given (`sourceDomain`, `burnToken`) pair, to `to` address."}},"version":1},"developerDoc":{"kind":"dev","methods":{"burn(address,uint256)":{"params":{"amount":"amount of tokens to burn. Must be less than or equal to this ITokenMinter's account balance of the given `_burnToken`.","burnToken":"burnable token."}},"getLocalToken(uint32,bytes32)":{"params":{"remoteDomain":"Remote domain","remoteToken":"Remote token"},"returns":{"_0":"local token address"}},"mint(uint32,bytes32,address,uint256)":{"details":"reverts if the (`sourceDomain`, `burnToken`) pair does not map to a nonzero local token address. This mapping can be queried using getLocalToken().","params":{"amount":"Amount of tokens to mint. Must be less than or equal to the minterAllowance of this TokenMinter for given `_mintToken`.","burnToken":"Burned token address as bytes32.","sourceDomain":"Source domain where `burnToken` was burned.","to":"Address to receive minted tokens, corresponding to `burnToken`, on this domain."},"returns":{"mintToken":"token minted."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"remoteToken\",\"type\":\"bytes32\"}],\"name\":\"getLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"sourceDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"burnToken\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"params\":{\"amount\":\"amount of tokens to burn. Must be less than or equal to this ITokenMinter's account balance of the given `_burnToken`.\",\"burnToken\":\"burnable token.\"}},\"getLocalToken(uint32,bytes32)\":{\"params\":{\"remoteDomain\":\"Remote domain\",\"remoteToken\":\"Remote token\"},\"returns\":{\"_0\":\"local token address\"}},\"mint(uint32,bytes32,address,uint256)\":{\"details\":\"reverts if the (`sourceDomain`, `burnToken`) pair does not map to a nonzero local token address. This mapping can be queried using getLocalToken().\",\"params\":{\"amount\":\"Amount of tokens to mint. Must be less than or equal to the minterAllowance of this TokenMinter for given `_mintToken`.\",\"burnToken\":\"Burned token address as bytes32.\",\"sourceDomain\":\"Source domain where `burnToken` was burned.\",\"to\":\"Address to receive minted tokens, corresponding to `burnToken`, on this domain.\"},\"returns\":{\"mintToken\":\"token minted.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Burn tokens owned by this ITokenMinter.\"},\"getLocalToken(uint32,bytes32)\":{\"notice\":\"Get the local token associated with the given remote domain and token.\"},\"mint(uint32,bytes32,address,uint256)\":{\"notice\":\"Mints `amount` of local tokens corresponding to the given (`sourceDomain`, `burnToken`) pair, to `to` address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"ITokenMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"burn(address,uint256)":"9dc29fac","getLocalToken(uint32,bytes32)":"78a0565e","mint(uint32,bytes32,address,uint256)":"d54de06f"}},"solidity/SynapseCCTP.sol:MinimalForwarderLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062b83228cb4cad1893c1d418e8705515a544b4a769800ee731c552ce3f9cf81c64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122062b83228cb4cad1893c1d418e8705515a544b4a769800ee731c552ce3f9cf81c64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"44298:4120:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;44298:4120:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"44298:4120:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that forwards all calls to a any target address with any payload. Unlike EIP-1167, delegates calls are not used, so the forwarder contract is `msg.sender` as far as the target contract is concerned. # Minimal Forwarder Bytecode Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167). Following changes were made: - Target address is not saved in the deployed contract code, but is passed as a part of the payload. - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload. - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes. - The target address is derived using CALLDATALOAD. - CALLVALUE is used to pass the msg.value to the target contract. - `call()` is used instead of `delegatecall()`. ## Bytecode Table | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     | | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ | | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     | | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     | | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 | | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 | | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 | | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 | | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 | | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 | | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 | | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 | | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      | | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      | | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      | | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      | | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      | | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      | | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      | | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      | | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      | | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      | | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      | | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    | | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    | | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    | | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    | | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    | | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        | | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    | | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        | \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any). \u003e - Stack View (S7..S0) is shown after the execution of the opcode. \u003e - The stack elements are shown from top to bottom. \u003e Opcodes are typically dealing with the top stack elements, so they are shown first. \u003e - `cds` refers to the calldata size. \u003e - `rds` refers to the returndata size (which is zero before the first external call). \u003e - `val` refers to the provided `msg.value`. \u003e - `addr` refers to the target address loaded from calldata. \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left. \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success. ## Bytecode Explanation - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address). \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack. - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\". \u003e - `dup1` duplicates the top stack item. - `0x05..0x08` - Copy the target call payload to memory. \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements: \u003e memory offset to write to, calldata offset to read from, and length of the data to copy. - `0x09..0x11` - Prepare the stack for the `call` opcode. \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero \u003e after we perform the first external call. \u003e - `swap3` swaps the top stack item with the fourth stack item. \u003e - `callvalue` pushes `msg.value` onto the stack. \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack. \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address. \u003e - `gas` pushes the remaining gas onto the stack. - `0x12..0x12` - Call the target contract. \u003e - `call` issues an external call to a target address. \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length, \u003e memory offset to write return data to, and length of return data to write to memory. \u003e - Pushes on stack: 0 on failure, 1 on success. - `0x13..0x16` - Copy the return data to memory. \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack. \u003e - `dup3` duplicates the third stack item. \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements: \u003e memory offset to write to, return data offset to read from, and length of the data to copy. - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size. \u003e - `swap1` swaps the top stack item with the second stack item. \u003e - `swap2` swaps the top stack item with the third stack item. \u003e - `0x1e` refers to the position of the `jumpdest` opcode. \u003e  It is used to jump to the `return` opcode, if call was successful. - `0x1c..0x1c` - Jump to 0x1e position, if call was successful. \u003e - `jumpi` pops two top stack items: jump destination and jump condition. \u003e If jump condition is nonzero, jumps to the jump destination. - `0x1d..0x1d` - Revert if call was unsuccessful. \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message. \u003e - This allows us to bubble the revert message from the external call. - `0x1e..0x1e` - Jump destination for successful call. \u003e - `jumpdest` is a no-op that marks a valid jump destination. - `0x1f..0x1f` - Return if call was successful. \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data. \u003e - This allows us to reuse the return data from the external call. # Minimal Forwarder Init Code Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol). Following changes were made: - Adjusted bytecode length to 32 bytes. - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack. \u003e `bytecode` refers to the bytecode specified in the above table. ## Init Code Table | Pos  | OP   | OP + Args | Description     | S1  | S0       | | ---- | ---- | --------- | --------------- | --- | -------- | | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode | | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode | | 0x1c | 0x52 | 0x52      | mstore          |     |          | | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       | | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       | | 0x20 | 0xf3 | 0xf3      | return          |     |          | \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code. \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode. ## Init Code Explanation - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack. \u003e - `push32` pushes 32 bytes as a single stack item onto the stack. - `0x1b..0x1b` - Push 0 onto the stack. \u003e No external calls were made, so the return data size is 0. - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory. \u003e - `mstore` pops two top stack items: memory offset to write to and value to write. \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory. - `0x1d..0x1f` - Prepare stack for `return` opcode. \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory. - `0x20..0x20` - Return the Minimal Forwarder bytecode. \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data. \u003e - This allows us to return the Minimal Forwarder bytecode.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that forwards all calls to a any target address with any payload. Unlike EIP-1167, delegates calls are not used, so the forwarder contract is `msg.sender` as far as the target contract is concerned. # Minimal Forwarder Bytecode Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167). Following changes were made: - Target address is not saved in the deployed contract code, but is passed as a part of the payload. - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload. - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes. - The target address is derived using CALLDATALOAD. - CALLVALUE is used to pass the msg.value to the target contract. - `call()` is used instead of `delegatecall()`. ## Bytecode Table | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     | | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ | | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     | | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     | | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 | | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 | | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 | | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 | | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 | | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 | | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 | | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 | | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      | | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      | | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      | | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      | | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      | | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      | | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      | | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      | | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      | | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      | | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      | | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    | | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    | | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    | | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    | | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    | | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        | | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    | | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        | \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any). \u003e - Stack View (S7..S0) is shown after the execution of the opcode. \u003e - The stack elements are shown from top to bottom. \u003e Opcodes are typically dealing with the top stack elements, so they are shown first. \u003e - `cds` refers to the calldata size. \u003e - `rds` refers to the returndata size (which is zero before the first external call). \u003e - `val` refers to the provided `msg.value`. \u003e - `addr` refers to the target address loaded from calldata. \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left. \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success. ## Bytecode Explanation - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address). \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack. - `0x04..0x04` - Duplicate the offset to use it later as \\\"payload length\\\". \u003e - `dup1` duplicates the top stack item. - `0x05..0x08` - Copy the target call payload to memory. \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements: \u003e memory offset to write to, calldata offset to read from, and length of the data to copy. - `0x09..0x11` - Prepare the stack for the `call` opcode. \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero \u003e after we perform the first external call. \u003e - `swap3` swaps the top stack item with the fourth stack item. \u003e - `callvalue` pushes `msg.value` onto the stack. \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack. \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address. \u003e - `gas` pushes the remaining gas onto the stack. - `0x12..0x12` - Call the target contract. \u003e - `call` issues an external call to a target address. \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length, \u003e memory offset to write return data to, and length of return data to write to memory. \u003e - Pushes on stack: 0 on failure, 1 on success. - `0x13..0x16` - Copy the return data to memory. \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack. \u003e - `dup3` duplicates the third stack item. \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements: \u003e memory offset to write to, return data offset to read from, and length of the data to copy. - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size. \u003e - `swap1` swaps the top stack item with the second stack item. \u003e - `swap2` swaps the top stack item with the third stack item. \u003e - `0x1e` refers to the position of the `jumpdest` opcode. \u003e  It is used to jump to the `return` opcode, if call was successful. - `0x1c..0x1c` - Jump to 0x1e position, if call was successful. \u003e - `jumpi` pops two top stack items: jump destination and jump condition. \u003e If jump condition is nonzero, jumps to the jump destination. - `0x1d..0x1d` - Revert if call was unsuccessful. \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message. \u003e - This allows us to bubble the revert message from the external call. - `0x1e..0x1e` - Jump destination for successful call. \u003e - `jumpdest` is a no-op that marks a valid jump destination. - `0x1f..0x1f` - Return if call was successful. \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data. \u003e - This allows us to reuse the return data from the external call. # Minimal Forwarder Init Code Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol). Following changes were made: - Adjusted bytecode length to 32 bytes. - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack. \u003e `bytecode` refers to the bytecode specified in the above table. ## Init Code Table | Pos  | OP   | OP + Args | Description     | S1  | S0       | | ---- | ---- | --------- | --------------- | --- | -------- | | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode | | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode | | 0x1c | 0x52 | 0x52      | mstore          |     |          | | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       | | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       | | 0x20 | 0xf3 | 0xf3      | return          |     |          | \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code. \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode. ## Init Code Explanation - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack. \u003e - `push32` pushes 32 bytes as a single stack item onto the stack. - `0x1b..0x1b` - Push 0 onto the stack. \u003e No external calls were made, so the return data size is 0. - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory. \u003e - `mstore` pops two top stack items: memory offset to write to and value to write. \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory. - `0x1d..0x1f` - Prepare stack for `return` opcode. \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory. - `0x20..0x20` - Return the Minimal Forwarder bytecode. \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data. \u003e - This allows us to return the Minimal Forwarder bytecode.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"MinimalForwarderLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:RequestLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dce9c2238eef7e699856efa83369c374cb4d872745cd3deefd0571ff5fe22fbb64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dce9c2238eef7e699856efa83369c374cb4d872745cd3deefd0571ff5fe22fbb64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"16930:8527:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;16930:8527:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"16930:8527:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"# Memory layout of common Request fields for versions [REQUEST_BASE, ...) \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot. | Position   | Field           | Type    | Bytes | Description                                        | | ---------- | --------------- | ------- | ----- | -------------------------------------------------- | | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         | | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         | | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      | | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           | | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      | # Memory layout of common Request fields for versions [REQUEST_SWAP, ...) \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot. \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16. \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token. | Position   | Field           | Type    | Bytes | Description                                        | | ---------- | --------------- | ------- | ----- | -------------------------------------------------- | | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           | | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       | | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               | | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               | | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"# Memory layout of common Request fields for versions [REQUEST_BASE, ...) \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot. | Position   | Field           | Type    | Bytes | Description                                        | | ---------- | --------------- | ------- | ----- | -------------------------------------------------- | | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         | | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         | | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      | | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           | | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      | # Memory layout of common Request fields for versions [REQUEST_SWAP, ...) \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot. \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16. \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token. | Position   | Field           | Type    | Bytes | Description                                        | | ---------- | --------------- | ------- | ----- | -------------------------------------------------- | | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           | | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       | | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               | | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               | | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"RequestLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:SafeERC20":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db481b01e27340107f8773a209c67cc43e84d8758d685f09c04b63dab17b8b4164736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220db481b01e27340107f8773a209c67cc43e84d8758d685f09c04b63dab17b8b4164736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"51657:3270:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;51657:3270:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"51657:3270:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"SafeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:SlicerLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206bc0ea76823bc81c8dc727db42575df1d55cb6d977435627f0cf6b152e41d33b64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206bc0ea76823bc81c8dc727db42575df1d55cb6d977435627f0cf6b152e41d33b64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"11696:3089:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;11696:3089:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"11696:3089:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"Library for slicing bytes arrays. # BytesArray stack layout (from highest bits to lowest) | Position   | Field | Type    | Bytes | Description                              | | ---------- | ----- | ------- | ----- | ---------------------------------------- | | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array | | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for slicing bytes arrays. # BytesArray stack layout (from highest bits to lowest) | Position   | Field | Type    | Bytes | Description                              | | ---------- | ----- | ------- | ----- | ---------------------------------------- | | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array | | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"SlicerLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:SynapseCCTP":{"code":"0x60e06040523480156200001157600080fd5b506040516200239e3803806200239e83398101604081905262000034916200013e565b6001600160a01b03811660c081905260408051632c12192160e01b81529051632c121921916004808201926020929091908290030181865afa1580156200007f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a591906200013e565b6001600160a01b031660a08190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa158015620000ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000115919062000165565b63ffffffff16608052506200018d565b6001600160a01b03811681146200013b57600080fd5b50565b6000602082840312156200015157600080fd5b81516200015e8162000125565b9392505050565b6000602082840312156200017857600080fd5b815163ffffffff811681146200015e57600080fd5b60805160a05160c0516121a3620001fb6000396000818160d5015281816104f40152818161062c01528181610d2001528181610dc30152610e05015260008181610139015281816102bc01526110850152600081816101600152818161034f015261087c01526121a36000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80637b04c18111610076578063e9259ab91161005b578063e9259ab914610197578063e9bbb36d1461020e578063f879a41a1461029957600080fd5b80637b04c181146101345780638d3638f41461015b57600080fd5b8063304ddb4c146100a8578063393e5b60146100bd57806346117830146100d05780634a5ae51d14610121575b600080fd5b6100bb6100b6366004611c88565b6102ac565b005b6100bb6100cb366004611d0d565b610628565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100bb61012f366004611d86565b61085a565b6100f77f000000000000000000000000000000000000000000000000000000000000000081565b6101827f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610118565b6101dd6101a5366004611e1f565b60006020819052908152604090205463ffffffff811690640100000000900473ffffffffffffffffffffffffffffffffffffffff1682565b6040805163ffffffff909316835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610118565b6100bb61021c366004611e38565b60408051808201825263ffffffff938416815273ffffffffffffffffffffffffffffffffffffffff9283166020808301918252600096875286905291909420935184549151909216640100000000027fffffffffffffffff0000000000000000000000000000000000000000000000009091169190921617179055565b6100f76102a7366004611d0d565b610970565b6102b684846109bf565b925060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638371744e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190611e78565b604080517f000000000000000000000000000000000000000000000000000000000000000060e01b7fffffffff0000000000000000000000000000000000000000000000000000000016602082015260c083901b7fffffffffffffffff000000000000000000000000000000000000000000000000166024820152606088811b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000908116602c8401528284018990528b821b169082015281516054818303018152607490910190915290915060009061042490859085610b18565b60008881526020818152604080832081518083019092525463ffffffff81168252640100000000900473ffffffffffffffffffffffffffffffffffffffff16918101829052929350908190036104a6576040517fa86a3b0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8151835160208086019190912067ffffffff0000000083831b1663ffffffff8a161760009081529152604090206104dd8a8a610cdd565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f856ddb68a84868e6105278288610e4f565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b168152600481019590955263ffffffff939093166024850152604484019190915273ffffffffffffffffffffffffffffffffffffffff166064830152608482015260a4016020604051808303816000875af11580156105b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d79190611e78565b50807f4ce96273f442a9bc593fea917ea7e8c2a009befc78ba3e334008948c7addf22a8c888d8d8d8b60405161061296959493929190611ef2565b60405180910390a2505050505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cb75c11c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b99190611f55565b905060008173ffffffffffffffffffffffffffffffffffffffff166378a0565e8561070d8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815263ffffffff9290921660048301526024820152604401602060405180830381865afa15801561076c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107909190611f55565b905073ffffffffffffffffffffffffffffffffffffffff81166107df576040517f74e3d32e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b77ffffffff000000000000000000000000000000000000000060a09490941b9390931673ffffffffffffffffffffffffffffffffffffffff92831617600090815260016020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169390921692909217905550565b60006108668383610e94565b825160208085019190912067ffffffff000000007f0000000000000000000000000000000000000000000000000000000000000000831b1663ffffffff87161760009081529152604090209091506108c18888888885610fd8565b6000806108cd84611100565b9150915060006108dd83836111a1565b9092509050600080806108f186868a6111ac565b6040805173ffffffffffffffffffffffffffffffffffffffff8b81168252602082018a9052848116828401526060820184905291519497509295509093508992908616917feaf2537b3a5c10387b14e2c0e57b1e11b46ff39b0f4ead5dac98cb0f4fd2118f919081900360800190a35050505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff81811660a084901b77ffffffff00000000000000000000000000000000000000001617600090815260016020526040902054165b92915050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610a2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a529190611f72565b9050610a7673ffffffffffffffffffffffffffffffffffffffff85163330866111ec565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b069190611f72565b610b109190611fba565b949350505050565b6060600163ffffffff85161115610b5b576040517f523fa8d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b6760006020611fcd565b610b72906020611fcd565b610b7d906014611fcd565b835114610bb6576040517f74593f8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8416158015610bca5750815115155b15610c01576040517f74593f8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff84166001148015610c7b5750610c1e60006020611fcd565b610c29906020611fcd565b610c34906014611fcd565b610c4060006020611fcd565b610c4b906020611fcd565b610c56906014611fcd565b610c61906020611fcd565b610c6c906020611fcd565b610c769190611fba565b825114155b15610cb2576040517f74593f8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8282604051602001610cc5929190611fe0565b60405160208183030381529060405290509392505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660248301526000919084169063dd62ed3e90604401602060405180830381865afa158015610d73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d979190611f72565b905081811015610e4a578015610de957610de973ffffffffffffffffffffffffffffffffffffffff84167f000000000000000000000000000000000000000000000000000000000000000060006112b0565b610e4a73ffffffffffffffffffffffffffffffffffffffff84167f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6112b0565b505050565b6000610e8d610e7473ffffffffffffffffffffffffffffffffffffffff851684611437565b73ffffffffffffffffffffffffffffffffffffffff1690565b9392505050565b6000600163ffffffff84161115610ed7576040517f523fa8d500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff8316158015610f0d5750610ef260006020611fcd565b610efd906020611fcd565b610f08906014611fcd565b825114155b15610f44576040517f74593f8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff83166001148015610f925750610f6160006020611fcd565b610f6c906020611fcd565b610f77906014611fcd565b610f82906020611fcd565b610f8d906020611fcd565b825114155b15610fc9576040517f74593f8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516020830160801b17610e8d565b6000610fe382611523565b905060006357ecfd2860e01b87878787604051602401611006949392919061203a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152905060006110aa73ffffffffffffffffffffffffffffffffffffffff84167f0000000000000000000000000000000000000000000000000000000000000000846115dc565b9050808060200190518101906110c09190612061565b6110f6576040517f182f34eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050505050565b60008060008061110f856115eb565b73ffffffffffffffffffffffffffffffffffffffff80831660a086901b77ffffffff00000000000000000000000000000000000000001617600090815260016020526040902054169750955091935090915084905061119a576040517f5ec62f3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050915091565b8060005b9250929050565b60008060006111ba84611652565b92508591508490506111e373ffffffffffffffffffffffffffffffffffffffff83168483611674565b93509350939050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526112aa9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526116ca565b50505050565b80158061135057506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561132a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134e9190611f72565b155b6113e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e4a9084907f095ea7b30000000000000000000000000000000000000000000000000000000090606401611246565b6000610e8d83836040518060400160405280602081526020017f602036038060203d373d3d3d923d343d355af13d82803e903d91601e57fd5bf38152506040516020016114849190612083565b6040516020818303038152906040528051906020012060405160200161150a939291907fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b6040516020818303038152906040528051906020012090565b6000806040518060400160405280602081526020017f602036038060203d373d3d3d923d343d355af13d82803e903d91601e57fd5bf381525060405160200161156c9190612083565b6040516020818303038152906040529050828151602083016000f5915073ffffffffffffffffffffffffffffffffffffffff82166115d6576040517f27afa9fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50919050565b6060610b1084848460006117d6565b6000808080806115fd81875b9061183b565b90508060e01c945067ffffffffffffffff8160a01c16935073ffffffffffffffffffffffffffffffffffffffff811692506116456000602061163f9190611fcd565b876115f7565b60001c9150509193509193565b60006109b9611662826020611fcd565b61166d906020611fcd565b83906118d6565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610e4a9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611246565b600061172c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119749092919063ffffffff16565b805190915015610e4a578080602001905181019061174a9190612061565b610e4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016113d8565b606061183273ffffffffffffffffffffffffffffffffffffffff8516846040516020016118049291906120ef565b60408051601f1981840301815291905273ffffffffffffffffffffffffffffffffffffffff87169084611983565b95945050505050565b6000608083901c6fffffffffffffffffffffffffffffffff841680841061188e576040517fdfc52d7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808460200111156118cb576040517f4b72f29d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509091015192915050565b6000608083901c6fffffffffffffffffffffffffffffffff8416808410611929576040517fdfc52d7b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80846014011115611966576040517f4b72f29d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509091015160601c92915050565b6060610b1084846000856119a5565b6060610b10848484604051806060016040528060298152602001612145602991395b606082471015611a37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016113d8565b73ffffffffffffffffffffffffffffffffffffffff85163b611ab5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016113d8565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611ade9190612115565b60006040518083038185875af1925050503d8060008114611b1b576040519150601f19603f3d011682016040523d82523d6000602084013e611b20565b606091505b5091509150611b30828286611b3b565b979650505050505050565b60608315611b4a575081610e8d565b825115611b5a5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d89190612131565b73ffffffffffffffffffffffffffffffffffffffff81168114611bb057600080fd5b50565b803563ffffffff81168114611bc757600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112611c0c57600080fd5b813567ffffffffffffffff80821115611c2757611c27611bcc565b604051601f8301601f19908116603f01168101908282118183101715611c4f57611c4f611bcc565b81604052838152866020858801011115611c6857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060c08789031215611ca157600080fd5b8635611cac81611b8e565b9550602087013594506040870135611cc381611b8e565b935060608701359250611cd860808801611bb3565b915060a087013567ffffffffffffffff811115611cf457600080fd5b611d0089828a01611bfb565b9150509295509295509295565b60008060408385031215611d2057600080fd5b611d2983611bb3565b91506020830135611d3981611b8e565b809150509250929050565b60008083601f840112611d5657600080fd5b50813567ffffffffffffffff811115611d6e57600080fd5b6020830191508360208285010111156111a557600080fd5b60008060008060008060808789031215611d9f57600080fd5b863567ffffffffffffffff80821115611db757600080fd5b611dc38a838b01611d44565b90985096506020890135915080821115611ddc57600080fd5b611de88a838b01611d44565b9096509450849150611dfc60408a01611bb3565b93506060890135915080821115611e1257600080fd5b50611d0089828a01611bfb565b600060208284031215611e3157600080fd5b5035919050565b600080600060608486031215611e4d57600080fd5b83359250611e5d60208501611bb3565b91506040840135611e6d81611b8e565b809150509250925092565b600060208284031215611e8a57600080fd5b815167ffffffffffffffff81168114610e8d57600080fd5b60005b83811015611ebd578181015183820152602001611ea5565b50506000910152565b60008151808452611ede816020860160208601611ea2565b601f01601f19169290920160200192915050565b86815267ffffffffffffffff8616602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015263ffffffff8316608082015260c060a08201526000611f4960c0830184611ec6565b98975050505050505050565b600060208284031215611f6757600080fd5b8151610e8d81611b8e565b600060208284031215611f8457600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156109b9576109b9611f8b565b808201808211156109b9576109b9611f8b565b60008351611ff2818460208801611ea2565b835190830190612006818360208801611ea2565b01949350505050565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60408152600061204e60408301868861200f565b8281036020840152611b3081858761200f565b60006020828403121561207357600080fd5b81518015158114610e8d57600080fd5b7f7f000000000000000000000000000000000000000000000000000000000000008152600082516120bb816001850160208701611ea2565b7f3d5260203df300000000000000000000000000000000000000000000000000006001939091019283015250600701919050565b82815260008251612107816020850160208701611ea2565b919091016020019392505050565b60008251612127818460208701611ea2565b9190910192915050565b602081526000610e8d6020830184611ec656fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220b20f91da13ced161bd28ee9ec04443facf85562f061afbf72510e53e231d859164736f6c63430008110033","runtime-code":"","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"54929:12429:0:-:0;;;56134:243;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;56189:32:0;;;;;;56272:41;;;-1:-1:-1;;;56272:41:0;;;;:39;;:41;;;;;;;;;;;;;;;56189:32;56272:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;56231:83:0;;;;;56338:32;;;-1:-1:-1;;;56338:32:0;;;;:30;;:32;;;;;;;;;;;;;;;56231:83;56338:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;56324:46;;;;-1:-1:-1;54929:12429:0;;14:148:1;-1:-1:-1;;;;;106:31:1;;96:42;;86:70;;152:1;149;142:12;86:70;14:148;:::o;167:291::-;260:6;313:2;301:9;292:7;288:23;284:32;281:52;;;329:1;326;319:12;281:52;361:9;355:16;380:48;422:5;380:48;:::i;:::-;447:5;167:291;-1:-1:-1;;;167:291:1:o;736:280::-;805:6;858:2;846:9;837:7;833:23;829:32;826:52;;;874:1;871;864:12;826:52;906:9;900:16;956:10;949:5;945:22;938:5;935:33;925:61;;982:1;979;972:12;736:280;54929:12429:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"54929:12429:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;58010:1890;;;;;;:::i;:::-;;:::i;:::-;;56819:415;;;;;;:::i;:::-;;:::i;55851:47::-;;;;;;;;2647:42:1;2635:55;;;2617:74;;2605:2;2590:18;55851:47:0;;;;;;;;60002:1283;;;;;;:::i;:::-;;:::i;55790:55::-;;;;;55749:35;;;;;;;;4478:10:1;4466:23;;;4448:42;;4436:2;4421:18;55749:35:0;4304:192:1;56000:58:0;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;4888:10:1;4876:23;;;4858:42;;4948;4936:55;;;4931:2;4916:18;;4909:83;4831:18;56000:58:0;4686:312:1;57375:272:0;;;;;;:::i;:::-;57595:45;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;57559:33:0;;;;;;;;;;:81;;;;;;;;;;;;;;;;;;;;;;;57375:272;61712:190;;;;;;:::i;:::-;;:::i;58010:1890::-;58315:29;58326:9;58337:6;58315:10;:29::i;:::-;58306:38;;58354:12;58369:18;:37;;;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18390:78;;;58657:11;9475:3:1;9471:16;9489:66;9467:89;18390:78:0;;;9455:102:1;9594:3;9590:16;;;9608:66;9586:89;9573:11;;;9566:110;18330:29:0;9795:15:1;;;9695:66;9791:24;;;9777:12;;;9770:46;9832:12;;;9825:28;;;9887:15;;;9883:24;9869:12;;;9862:46;18390:78:0;;;;;;;;;9924:12:1;;;;18390:78:0;;;9590:16:1;;-1:-1:-1;;;58562:178:0;;58600:14;;58720:10;58562:24;:178::i;:::-;58750:26;58779:27;;;;;;;;;;;58750:56;;;;;;;;;;;;;;;;;;;;;;;;;58530:210;;-1:-1:-1;58750:56:0;58892:19;;;58888:60;;58920:28;;;;;;;;;;;;;;58888:60;58985:13;;66588:18;;66536:2;66588:18;;;;;;;66506:32;;;;;66505:51;;;;58958:24;66914:17;;;66944:23;;67058:2;67045:16;;59518:32;59532:9;59543:6;59518:13;:32::i;:::-;59560:39;:14;:39;;59613:6;59633:17;59664:14;59692:9;59715:60;59664:14;59769:5;59715:18;:60::i;:::-;59560:225;;;;;;;;;;;;;6176:25:1;;;;59560:225:0;6237:23:1;;;;6217:18;;;6210:51;6277:18;;;6270:34;;;;6352:42;6340:55;6320:18;;;6313:83;6412:19;;;6405:35;6148:19;;59560:225:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;59887:5;59800:93;59818:7;59827:5;59834:9;59845:6;59853:14;59869:16;59800:93;;;;;;;;;;;:::i;:::-;;;;;;;;58217:1683;;;;;;58010:1890;;;;;;:::o;56819:415::-;56903:19;56938:14;:26;;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;56903:64;;56977:18;56998:6;:20;;;57019:12;57033:30;:11;:28;;25613:22;;;25516:127;57033:30;56998:66;;;;;;;;;;;8154:23:1;;;;56998:66:0;;;8136:42:1;8194:18;;;8187:34;8109:18;;56998:66:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;56977:87;-1:-1:-1;57078:24:0;;;57074:61;;57111:24;;;;;;;;;;;;;;57074:61;67297:28;67322:3;67297:28;;;;;;;;67296:53;;;;;57145:69;;;;:26;:69;;;;;:82;;;;;;;;;;;;;;-1:-1:-1;56819:415:0:o;60002:1283::-;60298:15;60316:56;60339:14;60355:16;60316:22;:56::i;:::-;66588:18;;66536:2;66588:18;;;;;;;66506:32;60608:11;66506:32;;;66505:51;;;;60585:13;66914:17;;;66944:23;;67058:2;67045:16;;60298:74;;-1:-1:-1;60731:43:0;60748:7;;60757:9;;67045:16;60731;:43::i;:::-;60785:13;60800:14;60818:24;60834:7;60818:15;:24::i;:::-;60784:58;;;;60852:11;60959:24;60969:5;60976:6;60959:9;:24::i;:::-;60943:40;;-1:-1:-1;60943:40:0;-1:-1:-1;61093:17:0;;;61151:39;61167:5;60943:40;61182:7;61151:15;:39::i;:::-;61205:73;;;;8542:15:1;;;8524:34;;8589:2;8574:18;;8567:34;;;8637:15;;;8617:18;;;8610:43;8684:2;8669:18;;8662:34;;;61205:73:0;;61092:98;;-1:-1:-1;8637:15:1;;-1:-1:-1;8662:34:1;;-1:-1:-1;61272:5:0;;61205:73;;;;;;;;;;8450:3:1;61205:73:0;;;60181:1104;;;;;;;;60002:1283;;;;;;:::o;61712:190::-;67296:53;;;;67322:3;67297:28;;;;;67296:53;61800:7;61826:69;;;:26;:69;;;;;;;61712:190;;;;;:::o;63056:324::-;63181:38;;;;;63213:4;63181:38;;;2617:74:1;63125:20:0;;;;63181:23;;;;;;2590:18:1;;63181:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;63157:62;-1:-1:-1;63229:65:0;:30;;;63260:10;63280:4;63287:6;63229:30;:65::i;:::-;63319:38;;;;;63351:4;63319:38;;;2617:74:1;63360:13:0;;63319:23;;;;;;2590:18:1;;63319:38:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:54;;;;:::i;:::-;63304:69;63056:324;-1:-1:-1;;;;63056:324:0:o;19956:651::-;20108:29;17042:1;20153:29;;;;20149:65;;;20191:23;;;;;;;;;;;;;;20149:65;17144:23;17096:1;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;17288:21;;17307:2;17288:21;:::i;:::-;20228:12;:19;:42;20224:79;;20279:24;;;;;;;;;;;;;;20224:79;20317:30;;;;:57;;;;-1:-1:-1;20351:18:0;;:23;;20317:57;20313:94;;;20383:24;;;;;;;;;;;;;;20313:94;20421:30;;;17042:1;20421:30;:74;;;;-1:-1:-1;17144:23:0;17096:1;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;17288:21;;17307:2;17288:21;:::i;:::-;17144:23;17096:1;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;17288:21;;17307:2;17288:21;:::i;:::-;17436:23;;17457:2;17436:23;:::i;:::-;17512:26;;17536:2;17512:26;:::i;:::-;17590:41;;;;:::i;:::-;20455:11;:18;:40;;20421:74;20417:111;;;20504:24;;;;;;;;;;;;;;20417:111;20574:12;20588:11;20557:43;;;;;;;;;:::i;:::-;;;;;;;;;;;;;20538:62;;19956:651;;;;;:::o;62555:449::-;62648:63;;;;;62680:4;62648:63;;;10809:34:1;62648:23:0;62695:14;10879:15:1;;10859:18;;;10852:43;-1:-1:-1;;62648:23:0;;;;;;10721:18:1;;62648:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;62628:83;;62737:6;62725:9;:18;62721:277;;;62835:14;;62831:73;;62851:53;:25;;;62885:14;62902:1;62851:25;:53::i;:::-;62918:69;:25;;;62952:14;62969:17;62918:25;:69::i;:::-;62618:386;62555:449;;:::o;65996:172::-;66083:7;66109:52;:33;:26;;;66136:5;66109:26;:33::i;:::-;:50;;;25516:127;66109:52;66102:59;65996:172;-1:-1:-1;;;65996:172:0:o;20695:596::-;20784:7;17042:1;20807:29;;;;20803:65;;;20845:23;;;;;;;;;;;;;;20803:65;20882:30;;;;:71;;;;-1:-1:-1;17144:23:0;17096:1;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;17288:21;;17307:2;17288:21;:::i;:::-;20916:7;:14;:37;;20882:71;20878:133;;;20976:24;;;;;;;;;;;;;;20878:133;21024:30;;;17042:1;21024:30;:71;;;;-1:-1:-1;17144:23:0;17096:1;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;17288:21;;17307:2;17288:21;:::i;:::-;17436:23;;17457:2;17436:23;:::i;:::-;17512:26;;17536:2;17512:26;:::i;:::-;21058:7;:14;:37;;21024:71;21020:133;;;21118:24;;;;;;;;;;;;;;21020:133;12297:10;;12259:4;12250:14;;12552:3;12545:10;12544:18;21249:33;11788:782;63481:969;63724:17;63744:33;63771:5;63744:26;:33::i;:::-;63724:53;;63838:20;63884:43;;;63929:7;;63938:9;;63861:87;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;63861:87:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;64205:59:0;:21;;;64235:18;63861:87;64205:21;:59::i;:::-;64179:85;;64391:10;64380:30;;;;;;;;;;;;:::i;:::-;64375:68;;64419:24;;;;;;;;;;;;;;64375:68;63611:839;;;63481:969;;;;;:::o;65482:447::-;65547:13;65562:14;65588:19;65617:23;65694:20;:7;:18;:20::i;:::-;67296:53;;;;67322:3;67297:28;;;;;67296:53;65784:73;;;;:26;:73;;;;;;;;-1:-1:-1;65650:64:0;-1:-1:-1;65650:64:0;;-1:-1:-1;65650:64:0;;-1:-1:-1;65784:73:0;;-1:-1:-1;65867:55:0;;65899:23;;;;;;;;;;;;;;65867:55;65578:351;;65482:447;;;:::o;62293:184::-;62460:6;62361:22;62293:184;;;;;;:::o;64646:438::-;64796:17;64827:16;64857:17;64949:19;:7;:17;:19::i;:::-;64937:31;-1:-1:-1;64989:5:0;;-1:-1:-1;65016:6:0;;-1:-1:-1;65032:45:0;:26;;;64937:31;65016:6;65032:26;:45::i;:::-;64646:438;;;;;;;:::o;51924:241::-;52089:68;;12166:42:1;12235:15;;;52089:68:0;;;12217:34:1;12287:15;;12267:18;;;12260:43;12319:18;;;12312:34;;;52062:96:0;;52082:5;;52112:27;;12129:18:1;;52089:68:0;;;;-1:-1:-1;;52089:68:0;;;;;;;;;;;;;;;;;;;;;;;;;;;52062:19;:96::i;:::-;51924:241;;;;:::o;52425:603::-;52780:10;;;52779:62;;-1:-1:-1;52796:39:0;;;;;52820:4;52796:39;;;10809:34:1;52796:15:0;10879::1;;;10859:18;;;10852:43;52796:15:0;;;;;10721:18:1;;52796:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;52779:62;52758:163;;;;;;;12559:2:1;52758:163:0;;;12541:21:1;12598:2;12578:18;;;12571:30;12637:34;12617:18;;;12610:62;12708:24;12688:18;;;12681:52;12750:19;;52758:163:0;;;;;;;;;52958:62;;12984:42:1;12972:55;;52958:62:0;;;12954:74:1;13044:18;;;13037:34;;;52931:90:0;;52951:5;;52981:22;;12927:18:1;;52958:62:0;12780:297:1;48207:209:0;48286:7;48312:97;48348:8;48358:4;44819:18;;;;;;;;;;;;;;;;;44793:69;;;;;;;;:::i;:::-;;;;;;;;;;;;;45032:30;;;;;;48322:67;;;;;;;;;14094:66:1;14082:79;;14198:2;14194:15;;;;14211:66;14190:88;14186:1;14177:11;;14170:109;14304:2;14295:12;;14288:28;;;;14341:2;14332:12;;14325:28;14378:2;14369:12;;13796:591;48322:67:0;;;;;;;;;;;;;48312:78;;;;;;25794:3;25682:125;45348:799;45396:17;45617:21;44819:18;;;;;;;;;;;;;;;;;44793:69;;;;;;;;:::i;:::-;;;;;;;;;;;;;45617:43;;45970:4;45959:8;45953:15;45946:4;45936:8;45932:19;45929:1;45921:54;45908:67;-1:-1:-1;46057:23:0;;;46053:88;;46103:27;;;;;;;;;;;;;;46053:88;45415:732;45348:799;;;:::o;46580:280::-;46706:23;46802:51;46823:9;46834:6;46842:7;46851:1;46802:20;:51::i;22143:1014::-;22240:19;;;;;22390:49;22240:19;22390:7;:16;:29;;:49::i;:::-;22375:64;;22634:4;22629:3;22625:14;22609:30;;22801:18;22794:4;22789:3;22785:14;22781:39;22772:48;;22974:42;22968:4;22964:53;22945:72;;23105:44;17096:1;17165:2;17144:23;;;;:::i;:::-;23105:7;:16;21378:132;23105:44;23097:53;;23088:62;;22365:792;22143:1014;;;;;:::o;23346:139::-;23405:7;23431:47;17144:23;23405:7;17165:2;17144:23;:::i;:::-;17217:18;;17233:2;17217:18;:::i;:::-;23431:7;:29;;:47::i;51713:205::-;51852:58;;12984:42:1;12972:55;;51852:58:0;;;12954:74:1;13044:18;;;13037:34;;;51825:86:0;;51845:5;;51875:23;;12927:18:1;;51852:58:0;12780:297:1;54219:706:0;54638:23;54664:69;54692:4;54664:69;;;;;;;;;;;;;;;;;54672:5;54664:27;;;;:69;;;;;:::i;:::-;54747:17;;54638:95;;-1:-1:-1;54747:21:0;54743:176;;54842:10;54831:30;;;;;;;;;;;;:::i;:::-;54823:85;;;;;;;14594:2:1;54823:85:0;;;14576:21:1;14633:2;14613:18;;;14606:30;14672:34;14652:18;;;14645:62;14743:12;14723:18;;;14716:40;14773:19;;54823:85:0;14392:406:1;47388:481:0;47546:23;47770:92;47819:23;;;47846:7;47802:52;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;47802:52:0;;;;;;;;;47770:31;;;;47856:5;47770:31;:92::i;:::-;47757:105;47388:481;-1:-1:-1;;;;;47388:481:0:o;12671:553::-;12747:13;14652:3;14626:29;;;14739:37;;;12851:12;;;12847:42;;12872:17;;;;;;;;;;;;;;12847:42;12986:3;12973:5;12981:2;12973:10;:16;12969:43;;;12998:14;;;;;;;;;;;;;;12969:43;-1:-1:-1;13192:15:0;;;13186:22;;12671:553;-1:-1:-1;;12671:553:0:o;13363:771::-;13439:13;14652:3;14626:29;;;14739:37;;;13543:12;;;13539:42;;13564:17;;;;;;;;;;;;;;13539:42;13678:3;13665:5;13673:2;13665:10;:16;13661:43;;;13690:14;;;;;;;;;;;;;;13661:43;-1:-1:-1;14101:15:0;;;14095:22;14091:2;14087:31;;13363:771;-1:-1:-1;;13363:771:0:o;29615:223::-;29748:12;29779:52;29801:6;29809:4;29815:1;29818:12;29779:21;:52::i;30200:254::-;30329:12;30360:87;30382:6;30390:4;30396:5;30360:87;;;;;;;;;;;;;;;;;30702:499;30867:12;30924:5;30899:21;:30;;30891:81;;;;;;;15369:2:1;30891:81:0;;;15351:21:1;15408:2;15388:18;;;15381:30;15447:34;15427:18;;;15420:62;15518:8;15498:18;;;15491:36;15544:19;;30891:81:0;15167:402:1;30891:81:0;27219:19;;;;30982:60;;;;;;;15776:2:1;30982:60:0;;;15758:21:1;15815:2;15795:18;;;15788:30;15854:31;15834:18;;;15827:59;15903:18;;30982:60:0;15574:353:1;30982:60:0;31054:12;31068:23;31095:6;:11;;31114:5;31121:4;31095:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31053:73;;;;31143:51;31160:7;31169:10;31181:12;31143:16;:51::i;:::-;31136:58;30702:499;-1:-1:-1;;;;;;;30702:499:0:o;33315:692::-;33461:12;33489:7;33485:516;;;-1:-1:-1;33519:10:0;33512:17;;33485:516;33630:17;;:21;33626:365;;33824:10;33818:17;33884:15;33871:10;33867:2;33863:19;33856:44;33626:365;33963:12;33956:20;;;;;;;;;;;:::i;14:154:1:-;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;69:93;14:154;:::o;173:163::-;240:20;;300:10;289:22;;279:33;;269:61;;326:1;323;316:12;269:61;173:163;;;:::o;341:184::-;393:77;390:1;383:88;490:4;487:1;480:15;514:4;511:1;504:15;530:777;572:5;625:3;618:4;610:6;606:17;602:27;592:55;;643:1;640;633:12;592:55;679:6;666:20;705:18;742:2;738;735:10;732:36;;;748:18;;:::i;:::-;882:2;876:9;944:4;936:13;;-1:-1:-1;;932:22:1;;;956:2;928:31;924:40;912:53;;;980:18;;;1000:22;;;977:46;974:72;;;1026:18;;:::i;:::-;1066:10;1062:2;1055:22;1101:2;1093:6;1086:18;1147:3;1140:4;1135:2;1127:6;1123:15;1119:26;1116:35;1113:55;;;1164:1;1161;1154:12;1113:55;1228:2;1221:4;1213:6;1209:17;1202:4;1194:6;1190:17;1177:54;1275:1;1268:4;1263:2;1255:6;1251:15;1247:26;1240:37;1295:6;1286:15;;;;;;530:777;;;;:::o;1312:807::-;1424:6;1432;1440;1448;1456;1464;1517:3;1505:9;1496:7;1492:23;1488:33;1485:53;;;1534:1;1531;1524:12;1485:53;1573:9;1560:23;1592:31;1617:5;1592:31;:::i;:::-;1642:5;-1:-1:-1;1694:2:1;1679:18;;1666:32;;-1:-1:-1;1750:2:1;1735:18;;1722:32;1763:33;1722:32;1763:33;:::i;:::-;1815:7;-1:-1:-1;1869:2:1;1854:18;;1841:32;;-1:-1:-1;1892:38:1;1925:3;1910:19;;1892:38;:::i;:::-;1882:48;;1981:3;1970:9;1966:19;1953:33;2009:18;2001:6;1998:30;1995:50;;;2041:1;2038;2031:12;1995:50;2064:49;2105:7;2096:6;2085:9;2081:22;2064:49;:::i;:::-;2054:59;;;1312:807;;;;;;;;:::o;2124:319::-;2191:6;2199;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;2291:28;2309:9;2291:28;:::i;:::-;2281:38;;2369:2;2358:9;2354:18;2341:32;2382:31;2407:5;2382:31;:::i;:::-;2432:5;2422:15;;;2124:319;;;;;:::o;2702:347::-;2753:8;2763:6;2817:3;2810:4;2802:6;2798:17;2794:27;2784:55;;2835:1;2832;2825:12;2784:55;-1:-1:-1;2858:20:1;;2901:18;2890:30;;2887:50;;;2933:1;2930;2923:12;2887:50;2970:4;2962:6;2958:17;2946:29;;3022:3;3015:4;3006:6;2998;2994:19;2990:30;2987:39;2984:59;;;3039:1;3036;3029:12;3054:988;3170:6;3178;3186;3194;3202;3210;3263:3;3251:9;3242:7;3238:23;3234:33;3231:53;;;3280:1;3277;3270:12;3231:53;3320:9;3307:23;3349:18;3390:2;3382:6;3379:14;3376:34;;;3406:1;3403;3396:12;3376:34;3445:58;3495:7;3486:6;3475:9;3471:22;3445:58;:::i;:::-;3522:8;;-1:-1:-1;3419:84:1;-1:-1:-1;3610:2:1;3595:18;;3582:32;;-1:-1:-1;3626:16:1;;;3623:36;;;3655:1;3652;3645:12;3623:36;3694:60;3746:7;3735:8;3724:9;3720:24;3694:60;:::i;:::-;3773:8;;-1:-1:-1;3668:86:1;-1:-1:-1;3668:86:1;;-1:-1:-1;3827:37:1;3860:2;3845:18;;3827:37;:::i;:::-;3817:47;;3917:2;3906:9;3902:18;3889:32;3873:48;;3946:2;3936:8;3933:16;3930:36;;;3962:1;3959;3952:12;3930:36;;3985:51;4028:7;4017:8;4006:9;4002:24;3985:51;:::i;4501:180::-;4560:6;4613:2;4601:9;4592:7;4588:23;4584:32;4581:52;;;4629:1;4626;4619:12;4581:52;-1:-1:-1;4652:23:1;;4501:180;-1:-1:-1;4501:180:1:o;5003:387::-;5079:6;5087;5095;5148:2;5136:9;5127:7;5123:23;5119:32;5116:52;;;5164:1;5161;5154:12;5116:52;5200:9;5187:23;5177:33;;5229:37;5262:2;5251:9;5247:18;5229:37;:::i;:::-;5219:47;;5316:2;5305:9;5301:18;5288:32;5329:31;5354:5;5329:31;:::i;:::-;5379:5;5369:15;;;5003:387;;;;;:::o;5626:288::-;5695:6;5748:2;5736:9;5727:7;5723:23;5719:32;5716:52;;;5764:1;5761;5754:12;5716:52;5796:9;5790:16;5846:18;5839:5;5835:30;5828:5;5825:41;5815:69;;5880:1;5877;5870:12;6451:250;6536:1;6546:113;6560:6;6557:1;6554:13;6546:113;;;6636:11;;;6630:18;6617:11;;;6610:39;6582:2;6575:10;6546:113;;;-1:-1:-1;;6693:1:1;6675:16;;6668:27;6451:250::o;6706:329::-;6747:3;6785:5;6779:12;6812:6;6807:3;6800:19;6828:76;6897:6;6890:4;6885:3;6881:14;6874:4;6867:5;6863:16;6828:76;:::i;:::-;6949:2;6937:15;-1:-1:-1;;6933:88:1;6924:98;;;;7024:4;6920:109;;6706:329;-1:-1:-1;;6706:329:1:o;7040:663::-;7323:6;7312:9;7305:25;7378:18;7370:6;7366:31;7361:2;7350:9;7346:18;7339:59;7446:42;7438:6;7434:55;7429:2;7418:9;7414:18;7407:83;7526:6;7521:2;7510:9;7506:18;7499:34;7582:10;7574:6;7570:23;7564:3;7553:9;7549:19;7542:52;7631:3;7625;7614:9;7610:19;7603:32;7286:4;7652:45;7692:3;7681:9;7677:19;7669:6;7652:45;:::i;:::-;7644:53;7040:663;-1:-1:-1;;;;;;;;7040:663:1:o;7708:251::-;7778:6;7831:2;7819:9;7810:7;7806:23;7802:32;7799:52;;;7847:1;7844;7837:12;7799:52;7879:9;7873:16;7898:31;7923:5;7898:31;:::i;8707:184::-;8777:6;8830:2;8818:9;8809:7;8805:23;8801:32;8798:52;;;8846:1;8843;8836:12;8798:52;-1:-1:-1;8869:16:1;;8707:184;-1:-1:-1;8707:184:1:o;8896:::-;8948:77;8945:1;8938:88;9045:4;9042:1;9035:15;9069:4;9066:1;9059:15;9085:128;9152:9;;;9173:11;;;9170:37;;;9187:18;;:::i;9947:125::-;10012:9;;;10033:10;;;10030:36;;;10046:18;;:::i;10077:492::-;10252:3;10290:6;10284:13;10306:66;10365:6;10360:3;10353:4;10345:6;10341:17;10306:66;:::i;:::-;10435:13;;10394:16;;;;10457:70;10435:13;10394:16;10504:4;10492:17;;10457:70;:::i;:::-;10543:20;;10077:492;-1:-1:-1;;;;10077:492:1:o;10906:325::-;10994:6;10989:3;10982:19;11046:6;11039:5;11032:4;11027:3;11023:14;11010:43;;11098:1;11091:4;11082:6;11077:3;11073:16;11069:27;11062:38;10964:3;11220:4;-1:-1:-1;;11145:2:1;11137:6;11133:15;11129:88;11124:3;11120:98;11116:109;11109:116;;10906:325;;;;:::o;11236:431::-;11449:2;11438:9;11431:21;11412:4;11475:61;11532:2;11521:9;11517:18;11509:6;11501;11475:61;:::i;:::-;11584:9;11576:6;11572:22;11567:2;11556:9;11552:18;11545:50;11612:49;11654:6;11646;11638;11612:49;:::i;11672:277::-;11739:6;11792:2;11780:9;11771:7;11767:23;11763:32;11760:52;;;11808:1;11805;11798:12;11760:52;11840:9;11834:16;11893:5;11886:13;11879:21;11872:5;11869:32;11859:60;;11915:1;11912;11905:12;13082:709;13443:66;13438:3;13431:79;13413:3;13539:6;13533:13;13555:74;13622:6;13618:1;13613:3;13609:11;13602:4;13594:6;13590:17;13555:74;:::i;:::-;13692:66;13688:1;13648:16;;;;13680:10;;;13673:86;-1:-1:-1;13783:1:1;13775:10;;13082:709;-1:-1:-1;13082:709:1:o;14803:359::-;14990:6;14985:3;14978:19;14960:3;15026:6;15020:13;15042:73;15108:6;15103:2;15098:3;15094:12;15089:2;15081:6;15077:15;15042:73;:::i;:::-;15135:16;;;;15153:2;15131:25;;14803:359;-1:-1:-1;;;14803:359:1:o;15932:287::-;16061:3;16099:6;16093:13;16115:66;16174:6;16169:3;16162:4;16154:6;16150:17;16115:66;:::i;:::-;16197:16;;;;;15932:287;-1:-1:-1;;15932:287:1:o;16224:219::-;16373:2;16362:9;16355:21;16336:4;16393:44;16433:2;16422:9;16418:18;16410:6;16393:44;:::i","abiDefinition":[{"inputs":[{"internalType":"contract ITokenMessenger","name":"tokenMessenger_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CCTPMessageNotReceived","type":"error"},{"inputs":[],"name":"ForwarderDeploymentFailed","type":"error"},{"inputs":[],"name":"IncorrectRequestLength","type":"error"},{"inputs":[],"name":"IndexOutOrRange","type":"error"},{"inputs":[],"name":"LocalCCTPTokenNotFound","type":"error"},{"inputs":[],"name":"RemoteCCTPDeploymentNotSet","type":"error"},{"inputs":[],"name":"RemoteCCTPTokenNotSet","type":"error"},{"inputs":[],"name":"SliceOverrun","type":"error"},{"inputs":[],"name":"UnknownRequestVersion","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"address","name":"mintToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"kappa","type":"bytes32"}],"name":"CircleRequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"chainId","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"requestVersion","type":"uint32"},{"indexed":false,"internalType":"bytes","name":"formattedRequest","type":"bytes"},{"indexed":true,"internalType":"bytes32","name":"kappa","type":"bytes32"}],"name":"CircleRequestSent","type":"event"},{"inputs":[{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"address","name":"remoteToken","type":"address"}],"name":"getLocalToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"messageTransmitter","outputs":[{"internalType":"contract IMessageTransmitter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"uint32","name":"requestVersion","type":"uint32"},{"internalType":"bytes","name":"formattedRequest","type":"bytes"}],"name":"receiveCircleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"remoteDomainConfig","outputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"synapseCCTP","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"burnToken","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint32","name":"requestVersion","type":"uint32"},{"internalType":"bytes","name":"swapParams","type":"bytes"}],"name":"sendCircleToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"address","name":"remoteToken","type":"address"}],"name":"setLocalToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"remoteChainId","type":"uint256"},{"internalType":"uint32","name":"remoteDomain","type":"uint32"},{"internalType":"address","name":"remoteSynapseCCTP","type":"address"}],"name":"setRemoteDomainConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"tokenMessenger","outputs":[{"internalType":"contract ITokenMessenger","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)":{"notice":"Emitted when a Circle token is received with an attached action request."},"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)":{"notice":"Emitted when a Circle token is sent with an attached action request."}},"kind":"user","methods":{"getLocalToken(uint32,address)":{"notice":"Get the local token associated with the given remote domain and token."},"localDomain()":{"notice":"Refers to the local domain number used in CCTP messages."},"receiveCircleToken(bytes,bytes,uint32,bytes)":{"notice":"Receive  Circle token supported by CCTP with the request for the action to take."},"sendCircleToken(address,uint256,address,uint256,uint32,bytes)":{"notice":"Send a Circle token supported by CCTP to a given chain with the request for the action to take on the destination chain."},"setLocalToken(uint32,address)":{"notice":"Sets the local token associated with the given remote domain and token."},"setRemoteDomainConfig(uint256,uint32,address)":{"notice":"Sets the remote domain and deployment of SynapseCCTP for the given remote chainId."}},"version":1},"developerDoc":{"kind":"dev","methods":{"receiveCircleToken(bytes,bytes,uint32,bytes)":{"details":"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on this chain.","params":{"formattedRequest":"Formatted request for the action to take on this chain","message":"Message raw bytes emitted by CCTP MessageTransmitter on origin chain","requestVersion":"Version of the request format","signature":"Circle's attestation for the message obtained from Circle's API"}},"sendCircleToken(address,uint256,address,uint256,uint32,bytes)":{"details":"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on the destination chain. `chainId` refers to value from EIP-155 (block.chainid).","params":{"amount":"Amount of tokens to burn","burnToken":"Address of Circle token to burn","chainId":"Chain ID of the destination chain","recipient":"Recipient of the tokens on destination chain","requestVersion":"Version of the request format","swapParams":"Swap parameters for the action to take on the destination chain (could be empty)"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"tokenMessenger_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CCTPMessageNotReceived\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ForwarderDeploymentFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectRequestLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOrRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LocalCCTPTokenNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemoteCCTPDeploymentNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RemoteCCTPTokenNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SliceOverrun\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownRequestVersion\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"CircleRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"formattedRequest\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"CircleRequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"name\":\"getLocalToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageTransmitter\",\"outputs\":[{\"internalType\":\"contract IMessageTransmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"formattedRequest\",\"type\":\"bytes\"}],\"name\":\"receiveCircleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remoteDomainConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"synapseCCTP\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"swapParams\",\"type\":\"bytes\"}],\"name\":\"sendCircleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"remoteToken\",\"type\":\"address\"}],\"name\":\"setLocalToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"remoteChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"remoteDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"remoteSynapseCCTP\",\"type\":\"address\"}],\"name\":\"setRemoteDomainConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveCircleToken(bytes,bytes,uint32,bytes)\":{\"details\":\"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on this chain.\",\"params\":{\"formattedRequest\":\"Formatted request for the action to take on this chain\",\"message\":\"Message raw bytes emitted by CCTP MessageTransmitter on origin chain\",\"requestVersion\":\"Version of the request format\",\"signature\":\"Circle's attestation for the message obtained from Circle's API\"}},\"sendCircleToken(address,uint256,address,uint256,uint32,bytes)\":{\"details\":\"The request is a bytes array containing information about the end recipient of the tokens, as well as an optional swap action to take on the destination chain. `chainId` refers to value from EIP-155 (block.chainid).\",\"params\":{\"amount\":\"Amount of tokens to burn\",\"burnToken\":\"Address of Circle token to burn\",\"chainId\":\"Chain ID of the destination chain\",\"recipient\":\"Recipient of the tokens on destination chain\",\"requestVersion\":\"Version of the request format\",\"swapParams\":\"Swap parameters for the action to take on the destination chain (could be empty)\"}}},\"version\":1},\"userdoc\":{\"events\":{\"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)\":{\"notice\":\"Emitted when a Circle token is received with an attached action request.\"},\"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)\":{\"notice\":\"Emitted when a Circle token is sent with an attached action request.\"}},\"kind\":\"user\",\"methods\":{\"getLocalToken(uint32,address)\":{\"notice\":\"Get the local token associated with the given remote domain and token.\"},\"localDomain()\":{\"notice\":\"Refers to the local domain number used in CCTP messages.\"},\"receiveCircleToken(bytes,bytes,uint32,bytes)\":{\"notice\":\"Receive  Circle token supported by CCTP with the request for the action to take.\"},\"sendCircleToken(address,uint256,address,uint256,uint32,bytes)\":{\"notice\":\"Send a Circle token supported by CCTP to a given chain with the request for the action to take on the destination chain.\"},\"setLocalToken(uint32,address)\":{\"notice\":\"Sets the local token associated with the given remote domain and token.\"},\"setRemoteDomainConfig(uint256,uint32,address)\":{\"notice\":\"Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"SynapseCCTP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{"getLocalToken(uint32,address)":"f879a41a","localDomain()":"8d3638f4","messageTransmitter()":"7b04c181","receiveCircleToken(bytes,bytes,uint32,bytes)":"4a5ae51d","remoteDomainConfig(uint256)":"e9259ab9","sendCircleToken(address,uint256,address,uint256,uint32,bytes)":"304ddb4c","setLocalToken(uint32,address)":"393e5b60","setRemoteDomainConfig(uint256,uint32,address)":"e9bbb36d","tokenMessenger()":"46117830"}},"solidity/SynapseCCTP.sol:SynapseCCTPEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"address","name":"mintToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"kappa","type":"bytes32"}],"name":"CircleRequestFulfilled","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"chainId","type":"uint256"},{"indexed":false,"internalType":"uint64","name":"nonce","type":"uint64"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"requestVersion","type":"uint32"},{"indexed":false,"internalType":"bytes","name":"formattedRequest","type":"bytes"},{"indexed":true,"internalType":"bytes32","name":"kappa","type":"bytes32"}],"name":"CircleRequestSent","type":"event"}],"userDoc":{"events":{"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)":{"notice":"Emitted when a Circle token is received with an attached action request."},"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)":{"notice":"Emitted when a Circle token is sent with an attached action request."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)":{"params":{"amount":"Amount of tokens received by recipient","fee":"Fee paid for fulfilling the request, in minted tokens","kappa":"Unique identifier of the request","mintToken":"Address of the minted Circle token","recipient":"End recipient of the tokens on this chain","token":"Address of token that recipient received"}},"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)":{"details":"To fulfill the request, the validator needs to fetch `message` from `MessageSent` event emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API. This data will need to be presented to SynapseCCTP on the destination chain, along with `requestVersion` and `formattedRequest` emitted in this event.","params":{"amount":"Amount of Circle tokens burnt","chainId":"Chain ID of the destination chain","formattedRequest":"Formatted request for the action to take on the destination chain","kappa":"Unique identifier of the request","nonce":"Nonce of the CCTP message on origin chain","requestVersion":"Version of the request format","token":"Address of Circle token that was burnt"}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"CircleRequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"requestVersion\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"formattedRequest\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"kappa\",\"type\":\"bytes32\"}],\"name\":\"CircleRequestSent\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens received by recipient\",\"fee\":\"Fee paid for fulfilling the request, in minted tokens\",\"kappa\":\"Unique identifier of the request\",\"mintToken\":\"Address of the minted Circle token\",\"recipient\":\"End recipient of the tokens on this chain\",\"token\":\"Address of token that recipient received\"}},\"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)\":{\"details\":\"To fulfill the request, the validator needs to fetch `message` from `MessageSent` event emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API. This data will need to be presented to SynapseCCTP on the destination chain, along with `requestVersion` and `formattedRequest` emitted in this event.\",\"params\":{\"amount\":\"Amount of Circle tokens burnt\",\"chainId\":\"Chain ID of the destination chain\",\"formattedRequest\":\"Formatted request for the action to take on the destination chain\",\"kappa\":\"Unique identifier of the request\",\"nonce\":\"Nonce of the CCTP message on origin chain\",\"requestVersion\":\"Version of the request format\",\"token\":\"Address of Circle token that was burnt\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"CircleRequestFulfilled(address,address,uint256,address,uint256,bytes32)\":{\"notice\":\"Emitted when a Circle token is received with an attached action request.\"},\"CircleRequestSent(uint256,uint64,address,uint256,uint32,bytes,bytes32)\":{\"notice\":\"Emitted when a Circle token is sent with an attached action request.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"SynapseCCTPEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}},"solidity/SynapseCCTP.sol:TypeCasts":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203dcc62b08e0ccaeb776e315e0258adfdd7dbc3da007caeda048df5bbb8699a9864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203dcc62b08e0ccaeb776e315e0258adfdd7dbc3da007caeda048df5bbb8699a9864736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nerror IndexOutOrRange();\nerror SliceOverrun();\n\nerror IncorrectRequestLength();\nerror UnknownRequestVersion();\n\nerror CCTPMessageNotReceived();\nerror LocalCCTPTokenNotFound();\nerror RemoteCCTPDeploymentNotSet();\nerror RemoteCCTPTokenNotSet();\n\nerror ForwarderDeploymentFailed();\n\nabstract contract SynapseCCTPEvents {\n    // TODO: figure out what we need to emit for the Explorer\n\n    /// @notice Emitted when a Circle token is sent with an attached action request.\n    /// @dev To fulfill the request, the validator needs to fetch `message` from `MessageSent` event\n    /// emitted by Circle's MessageTransmitter in the same tx, then fetch `signature` for the message from Circle API.\n    /// This data will need to be presented to SynapseCCTP on the destination chain,\n    /// along with `requestVersion` and `formattedRequest` emitted in this event.\n    /// @param chainId              Chain ID of the destination chain\n    /// @param nonce                Nonce of the CCTP message on origin chain\n    /// @param token                Address of Circle token that was burnt\n    /// @param amount               Amount of Circle tokens burnt\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on the destination chain\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestSent(\n        uint256 chainId,\n        uint64 nonce,\n        address token,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes formattedRequest,\n        bytes32 indexed kappa\n    );\n\n    /// @notice Emitted when a Circle token is received with an attached action request.\n    /// @param recipient            End recipient of the tokens on this chain\n    /// @param mintToken            Address of the minted Circle token\n    /// @param fee                  Fee paid for fulfilling the request, in minted tokens\n    /// @param token                Address of token that recipient received\n    /// @param amount               Amount of tokens received by recipient\n    /// @param kappa                Unique identifier of the request\n    event CircleRequestFulfilled(\n        address indexed recipient,\n        address mintToken,\n        uint256 fee,\n        address token,\n        uint256 amount,\n        bytes32 indexed kappa\n    );\n}\n\ninterface IMessageTransmitter {\n    /**\n     * @notice Receives an incoming message, validating the header and passing\n     * the body to application-specific handler.\n     * @param message The message raw bytes\n     * @param signature The message signature\n     * @return success bool, true if successful\n     */\n    function receiveMessage(bytes calldata message, bytes calldata signature) external returns (bool success);\n\n    /**\n     * @notice Sends an outgoing message from the source domain, with a specified caller on the\n     * destination domain.\n     * @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * sendMessage() should be preferred for use cases where a specific destination caller is not required.\n     * @param destinationDomain Domain of destination chain\n     * @param recipient Address of message recipient on destination domain as bytes32\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @param messageBody Raw bytes content of message\n     * @return nonce reserved by message\n     */\n    function sendMessageWithCaller(\n        uint32 destinationDomain,\n        bytes32 recipient,\n        bytes32 destinationCaller,\n        bytes calldata messageBody\n    ) external returns (uint64);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Domain of chain on which the contract is deployed\n    function localDomain() external view returns (uint32);\n\n    // Next available nonce from this source domain\n    function nextAvailableNonce() external view returns (uint64);\n}\n\ninterface ISynapseCCTP {\n    /// @notice Send a Circle token supported by CCTP to a given chain\n    /// with the request for the action to take on the destination chain.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on the destination chain.\n    /// `chainId` refers to value from EIP-155 (block.chainid).\n    /// @param recipient            Recipient of the tokens on destination chain\n    /// @param chainId              Chain ID of the destination chain\n    /// @param burnToken            Address of Circle token to burn\n    /// @param amount               Amount of tokens to burn\n    /// @param requestVersion       Version of the request format\n    /// @param swapParams           Swap parameters for the action to take on the destination chain (could be empty)\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external;\n\n    /// @notice Receive  Circle token supported by CCTP with the request for the action to take.\n    /// @dev The request is a bytes array containing information about the end recipient of the tokens,\n    /// as well as an optional swap action to take on this chain.\n    /// @param message              Message raw bytes emitted by CCTP MessageTransmitter on origin chain\n    /// @param signature            Circle's attestation for the message obtained from Circle's API\n    /// @param requestVersion       Version of the request format\n    /// @param formattedRequest     Formatted request for the action to take on this chain\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external;\n}\n\ninterface ITokenMinter {\n    /**\n     * @notice Mints `amount` of local tokens corresponding to the\n     * given (`sourceDomain`, `burnToken`) pair, to `to` address.\n     * @dev reverts if the (`sourceDomain`, `burnToken`) pair does not\n     * map to a nonzero local token address. This mapping can be queried using\n     * getLocalToken().\n     * @param sourceDomain Source domain where `burnToken` was burned.\n     * @param burnToken Burned token address as bytes32.\n     * @param to Address to receive minted tokens, corresponding to `burnToken`,\n     * on this domain.\n     * @param amount Amount of tokens to mint. Must be less than or equal\n     * to the minterAllowance of this TokenMinter for given `_mintToken`.\n     * @return mintToken token minted.\n     */\n    function mint(\n        uint32 sourceDomain,\n        bytes32 burnToken,\n        address to,\n        uint256 amount\n    ) external returns (address mintToken);\n\n    /**\n     * @notice Burn tokens owned by this ITokenMinter.\n     * @param burnToken burnable token.\n     * @param amount amount of tokens to burn. Must be less than or equal to this ITokenMinter's\n     * account balance of the given `_burnToken`.\n     */\n    function burn(address burnToken, uint256 amount) external;\n\n    /**\n     * @notice Get the local token associated with the given remote domain and token.\n     * @param remoteDomain Remote domain\n     * @param remoteToken Remote token\n     * @return local token address\n     */\n    function getLocalToken(uint32 remoteDomain, bytes32 remoteToken) external view returns (address);\n}\n\ninterface ITokenMessenger {\n    /**\n     * @notice Deposits and burns tokens from sender to be minted on destination domain. The mint\n     * on the destination domain must be called by `destinationCaller`.\n     * WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n     * to broadcast the message on the destination domain. This is an advanced feature, and the standard\n     * depositForBurn() should be preferred for use cases where a specific destination caller is not required.\n     * Emits a `DepositForBurn` event.\n     * @dev reverts if:\n     * - given destinationCaller is zero address\n     * - given burnToken is not supported\n     * - given destinationDomain has no TokenMessenger registered\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\n     * to this contract is less than `amount`.\n     * - burn() reverts. For example, if `amount` is 0.\n     * - MessageTransmitter returns false or reverts.\n     * @param amount amount of tokens to burn\n     * @param destinationDomain destination domain\n     * @param mintRecipient address of mint recipient on destination domain\n     * @param burnToken address of contract to burn deposited tokens, on local domain\n     * @param destinationCaller caller on the destination domain, as bytes32\n     * @return nonce unique nonce reserved by message\n     */\n    function depositForBurnWithCaller(\n        uint256 amount,\n        uint32 destinationDomain,\n        bytes32 mintRecipient,\n        address burnToken,\n        bytes32 destinationCaller\n    ) external returns (uint64 nonce);\n\n    /**\n     * @notice Handles an incoming message received by the local MessageTransmitter,\n     * and takes the appropriate action. For a burn message, mints the\n     * associated token to the requested recipient on the local domain.\n     * @dev Validates the local sender is the local MessageTransmitter, and the\n     * remote sender is a registered remote TokenMessenger for `remoteDomain`.\n     * @param remoteDomain The domain where the message originated from.\n     * @param sender The sender of the message (remote TokenMessenger).\n     * @param messageBody The message body bytes.\n     * @return success Bool, true if successful.\n     */\n    function handleReceiveMessage(\n        uint32 remoteDomain,\n        bytes32 sender,\n        bytes calldata messageBody\n    ) external returns (bool success);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    // Local Message Transmitter responsible for sending and receiving messages to/from remote domains\n    function localMessageTransmitter() external view returns (address);\n\n    // Minter responsible for minting and burning tokens on the local domain\n    function localMinter() external view returns (address);\n}\n\n/// `BytesArray` is a custom type for storing a memory reference to a bytes array.\ntype BytesArray is uint256;\n\nusing SlicerLib for BytesArray global;\n\n/// Library for slicing bytes arrays.\n/// # BytesArray stack layout (from highest bits to lowest)\n///\n/// | Position   | Field | Type    | Bytes | Description                              |\n/// | ---------- | ----- | ------- | ----- | ---------------------------------------- |\n/// | (032..016] | loc   | uint128 | 16    | Memory address of underlying bytes array |\n/// | (016..000] | len   | uint128 | 16    | Length of underlying bytes array         |\nlibrary SlicerLib {\n    /// @notice Wrap a bytes array into a `BytesArray` custom type.\n    function wrapBytesArray(bytes memory arr) internal pure returns (BytesArray) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We add 0x20 to get the locations where the array data starts\n            loc := add(arr, 0x20)\n        }\n        uint256 len = arr.length;\n        // There is no scenario where loc or len would overflow uint128, so we omit this check.\n        // We use the highest 128 bits to encode the location and the lowest 128 bits to encode the length.\n        return BytesArray.wrap((loc \u003c\u003c 128) | len);\n    }\n\n    /// @notice Slices 32 bytes from the underlying bytes array starting from the given index.\n    function sliceBytes32(BytesArray arr, uint256 index) internal pure returns (bytes32 slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+32 never overflows\n            if (index + 32 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We need to load 32 bytes starting from loc + index\n            slice := mload(add(loc, index))\n        }\n    }\n\n    /// @notice Slices 20 bytes from the underlying bytes array starting from the given index,\n    /// and returns it as an address.\n    function sliceAddress(BytesArray arr, uint256 index) internal pure returns (address slice) {\n        (uint256 loc, uint256 len) = _unwrap(arr);\n        unchecked {\n            if (index \u003e= len) revert IndexOutOrRange();\n            // len fits into uint128, so index+20 never overflows\n            if (index + 20 \u003e len) revert SliceOverrun();\n        }\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To slice the address we need to do two steps:\n            // 1. Load 32 bytes starting from loc + index: this gets the address in the highest 20 bytes\n            // 2. Shift the result to the right by 12 bytes (96 bits): this clears the dirty lowest 12 bytes\n            slice := shr(96, mload(add(loc, index)))\n        }\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    function _unwrap(BytesArray arr) private pure returns (uint256 loc, uint256 len) {\n        // loc is stored in the highest 16 bytes of the underlying uint256\n        loc = BytesArray.unwrap(arr) \u003e\u003e 128;\n        // len is stored in the lowest 16 bytes of the underlying uint256\n        len = uint128(BytesArray.unwrap(arr));\n    }\n}\n\ntype Request is uint256;\n\nusing RequestLib for Request global;\n\n/// # Memory layout of common Request fields for versions [REQUEST_BASE, ...)\n/// \u003e - (originDomain, nonce, originBurnToken) are optimized for storage in a single slot.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [000..004) | originDomain    | uint32  | 4     | Domain of the origin chain                         |\n/// | [004..012) | nonce           | uint64  | 8     | Nonce of the CCTP message on origin domain         |\n/// | [012..032) | originBurnToken | address | 20    | Circle token that was burned on origin domain      |\n/// | [032..064) | amount          | uint256 | 32    | Amount of tokens to burn                           |\n/// | [064..084) | recipient       | address | 20    | Recipient of the tokens on destination domain      |\n///\n/// # Memory layout of common Request fields for versions [REQUEST_SWAP, ...)\n/// \u003e - (pool, tokenIndexFrom, tokenIndexTo, deadline) are optimized for storage in a single slot.\n/// \u003e - deadline is stored as uint80, which is enough to store timestamps until year 3*10^16.\n/// \u003e - If a swap fails due to deadline or minAmountOut check, the recipient will receive the minted Circle token.\n///\n/// | Position   | Field           | Type    | Bytes | Description                                        |\n/// | ---------- | --------------- | ------- | ----- | -------------------------------------------------- |\n/// | [084..104) | pool            | address | 20    | Liquidity pool for swapping Circle token           |\n/// | [104..105) | tokenIndexFrom  | uint8   | 1     | Index of the minted Circle token in the pool       |\n/// | [105..106) | tokenIndexTo    | uint8   | 1     | Index of the final token in the pool               |\n/// | [106..116) | deadline        | uint80  | 10    | Latest timestamp to execute the swap               |\n/// | [116..148) | minAmountOut    | uint256 | 32    | Minimum amount of tokens to receive from the swap  |\nlibrary RequestLib {\n    uint32 internal constant REQUEST_BASE = 0;\n    uint32 internal constant REQUEST_SWAP = 1;\n\n    uint256 private constant OFFSET_ORIGIN_DATA = 0;\n    uint256 private constant OFFSET_AMOUNT = OFFSET_ORIGIN_DATA + 32;\n    uint256 private constant OFFSET_RECIPIENT = OFFSET_AMOUNT + 32;\n    uint256 private constant REQUEST_BASE_LENGTH = OFFSET_RECIPIENT + 20;\n\n    uint256 private constant OFFSET_SWAP_PARAMS = REQUEST_BASE_LENGTH;\n    uint256 private constant OFFSET_MIN_AMOUNT_OUT = OFFSET_SWAP_PARAMS + 32;\n    uint256 private constant REQUEST_SWAP_LENGTH = OFFSET_MIN_AMOUNT_OUT + 32;\n    uint256 private constant SWAP_PARAMS_LENGTH = REQUEST_SWAP_LENGTH - REQUEST_BASE_LENGTH;\n\n    /// @notice Formats the base request into a bytes array.\n    /// @param originDomain_        Domain of the origin chain\n    /// @param nonce_               Nonce of the CCTP message on origin domain\n    /// @param originBurnToken_     Circle token that was burned on origin domain\n    /// @param amount_              Amount of tokens to burn\n    /// @param recipient_           Recipient of the tokens on destination domain\n    /// @return formattedRequest    Properly formatted base request\n    function formatBaseRequest(\n        uint32 originDomain_,\n        uint64 nonce_,\n        address originBurnToken_,\n        uint256 amount_,\n        address recipient_\n    ) internal pure returns (bytes memory formattedRequest) {\n        formattedRequest = abi.encodePacked(originDomain_, nonce_, originBurnToken_, amount_, recipient_);\n    }\n\n    /// @notice Formats the swap parameters part of the swap request into a bytes array.\n    /// @param pool_                Liquidity pool for swapping Circle token\n    /// @param tokenIndexFrom_      Index of the minted Circle token in the pool\n    /// @param tokenIndexTo_        Index of the final token in the pool\n    /// @param deadline_            Latest timestamp to execute the swap\n    /// @param minAmountOut_        Minimum amount of tokens to receive from the swap\n    /// @return formattedSwapParams Properly formatted swap parameters\n    function formatSwapParams(\n        address pool_,\n        uint8 tokenIndexFrom_,\n        uint8 tokenIndexTo_,\n        uint80 deadline_,\n        uint256 minAmountOut_\n    ) internal pure returns (bytes memory formattedSwapParams) {\n        formattedSwapParams = abi.encodePacked(pool_, tokenIndexFrom_, tokenIndexTo_, deadline_, minAmountOut_);\n    }\n\n    /// @notice Formats the request into a bytes array.\n    /// @dev Will revert if the either of these is true:\n    /// - Request version is unknown.\n    /// - Base request is not properly formatted.\n    /// - Swap parameters are specified for a base request.\n    /// - Swap parameters are not properly formatted.\n    /// @param requestVersion       Version of the request format\n    /// @param baseRequest_         Formatted base request\n    /// @param swapParams_          Formatted swap parameters\n    /// @return formattedRequest    Properly formatted swap request\n    function formatRequest(\n        uint32 requestVersion,\n        bytes memory baseRequest_,\n        bytes memory swapParams_\n    ) internal pure returns (bytes memory formattedRequest) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (baseRequest_.length != REQUEST_BASE_LENGTH) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 swapParams_.length != 0) revert IncorrectRequestLength();\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 swapParams_.length != SWAP_PARAMS_LENGTH) revert IncorrectRequestLength();\n        formattedRequest = abi.encodePacked(baseRequest_, swapParams_);\n    }\n\n    /// @notice Wraps the memory representation of a Request into a Request type.\n    function wrapRequest(uint32 requestVersion, bytes memory request) internal pure returns (Request) {\n        if (requestVersion \u003e REQUEST_SWAP) revert UnknownRequestVersion();\n        if (requestVersion == REQUEST_BASE \u0026\u0026 request.length != REQUEST_BASE_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        if (requestVersion == REQUEST_SWAP \u0026\u0026 request.length != REQUEST_SWAP_LENGTH) {\n            revert IncorrectRequestLength();\n        }\n        // Wrap the BytesArray into Request type\n        return Request.wrap(BytesArray.unwrap(SlicerLib.wrapBytesArray(request)));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a Request into a BytesArray.\n    function unwrap(Request request) internal pure returns (BytesArray) {\n        return BytesArray.wrap(Request.unwrap(request));\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: BASE ═══════════════════════════════════════════════\n\n    /// @notice Extracts the data related to the origin domain.\n    /// @param request          Request to slice\n    /// @return originDomain    Domain of the origin chain\n    /// @return nonce           Nonce of the CCTP message on origin domain\n    /// @return originBurnToken Circle token that was burned on origin domain\n    function originData(Request request)\n        internal\n        pure\n        returns (\n            uint32 originDomain,\n            uint64 nonce,\n            address originBurnToken,\n            uint256 amount\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_ORIGIN_DATA);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get originDomain, we need to shift the data by 256-32=224 bits\n            originDomain := shr(224, data)\n            // To get nonce, we need to shift the data by 256-96=160 bits, then mask the result with 0xFFFFFFFFFFFFFFFF\n            nonce := and(shr(160, data), 0xFFFFFFFFFFFFFFFF)\n            // To get originBurnToken, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            originBurnToken := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        amount = uint256(request.unwrap().sliceBytes32(OFFSET_AMOUNT));\n    }\n\n    /// @notice Extracts the recipient of the tokens on destination domain.\n    /// @param request      Request to slice\n    /// @return Recipient of the tokens on destination domain\n    function recipient(Request request) internal pure returns (address) {\n        return request.unwrap().sliceAddress(OFFSET_RECIPIENT);\n    }\n\n    // ═══════════════════════════════════════════ REQUEST SLICING: SWAP ═══════════════════════════════════════════════\n\n    /// @notice Extracts the swap parameters of the request\n    /// @param request          Request to slice\n    /// @return pool            Liquidity pool for swapping Circle token\n    /// @return tokenIndexFrom  Index of the minted Circle token in the pool\n    /// @return tokenIndexTo    Index of the final token in the pool\n    /// @return deadline        Latest timestamp to execute the swap\n    /// @return minAmountOut    Minimum amount of tokens to receive from the swap\n    function swapParams(Request request)\n        internal\n        pure\n        returns (\n            address pool,\n            uint8 tokenIndexFrom,\n            uint8 tokenIndexTo,\n            uint80 deadline,\n            uint256 minAmountOut\n        )\n    {\n        bytes32 data = request.unwrap().sliceBytes32(OFFSET_SWAP_PARAMS);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // To get pool, we need to shift the data by 256-160=96 bits\n            pool := shr(96, data)\n            // To get tokenIndexFrom, we need to shift the data by 256-168=88 bits, then mask the result with 0xFF\n            tokenIndexFrom := and(shr(88, data), 0xFF)\n            // To get tokenIndexTo, we need to shift the data by 256-176=80 bits, then mask the result with 0xFF\n            tokenIndexTo := and(shr(80, data), 0xFF)\n            // To get deadline, we need to mask the data with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n            deadline := and(data, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n        // Read as bytes32 and then cast to uint256\n        minAmountOut = uint256(request.unwrap().sliceBytes32(OFFSET_MIN_AMOUNT_OUT));\n    }\n}\n\nlibrary TypeCasts {\n    // alignment preserving cast\n    function addressToBytes32(address addr) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(addr)));\n    }\n\n    // alignment preserving cast\n    function bytes32ToAddress(bytes32 buf) internal pure returns (address) {\n        return address(uint160(uint256(buf)));\n    }\n}\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/// Minimal Forwarder is a EIP-1167 (Minimal Proxy Contract) spin-off that\n/// forwards all calls to a any target address with any payload.\n/// Unlike EIP-1167, delegates calls are not used, so the forwarder contract\n/// is `msg.sender` as far as the target contract is concerned.\n/// # Minimal Forwarder Bytecode\n/// Inspired by [EIP-1167](https://eips.ethereum.org/EIPS/eip-1167).\n/// Following changes were made:\n/// - Target address is not saved in the deployed contract code, but is passed as a part of the payload.\n/// - To forward a call, the sender needs to provide the target address as the first 32 bytes of the payload.\n/// - The payload to pass to the target contract occupies the rest of the payload, having an offset of 32 bytes.\n/// - The target address is derived using CALLDATALOAD.\n/// - CALLVALUE is used to pass the msg.value to the target contract.\n/// - `call()` is used instead of `delegatecall()`.\n/// ## Bytecode Table\n/// | Pos  | OP   | OP + Args | Description    | S7  | S6   | S5  | S4  | S3     | S2  | S1     | S0     |\n/// | ---- | ---- | --------- | -------------- | --- | ---- | --- | --- | ------ | --- | ------ | ------ |\n/// | 0x00 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        |     |        | 32     |\n/// | 0x02 | 0x36 | 0x36      | calldatasize   |     |      |     |     |        |     | cds    | 32     |\n/// | 0x03 | 0x03 | 0x03      | sub            |     |      |     |     |        |     |        | cds-32 |\n/// | 0x04 | 0x80 | 0x80      | dup1           |     |      |     |     |        |     | cds-32 | cds-32 |\n/// | 0x05 | 0x60 | 0x6020    | push1 0x20     |     |      |     |     |        | 32  | cds-32 | cds-32 |\n/// | 0x07 | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 32  | cds-32 | cds-32 |\n/// | 0x08 | 0x37 | 0x37      | calldatacopy   |     |      |     |     |        |     |        | cds-32 |\n/// | 0x09 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        |     | 0      | cds-32 |\n/// | 0x0a | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | 0   | 0      | cds-32 |\n/// | 0x0b | 0x3d | 0x3d      | returndatasize |     |      |     |     | 0      | 0   | 0      | cds-32 |\n/// | 0x0c | 0x92 | 0x92      | swap3          |     |      |     |     | cds-32 | 0   | 0      | 0      |\n/// | 0x0d | 0x3d | 0x3d      | returndatasize |     |      |     | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0e | 0x34 | 0x34      | callvalue      |     |      | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x0f | 0x3d | 0x3d      | returndatasize |     | 0    | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x10 | 0x35 | 0x35      | calldataload   |     | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x11 | 0x5a | 0x5a      | gas            | gas | addr | val | 0   | cds-32 | 0   | 0      | 0      |\n/// | 0x12 | 0xf1 | 0xf1      | call           |     |      |     |     |        |     | suc    | 0      |\n/// | 0x13 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | suc    | 0      |\n/// | 0x14 | 0x82 | 0x82      | dup3           |     |      |     |     | 0      | rds | suc    | 0      |\n/// | 0x15 | 0x80 | 0x80      | dup1           |     |      |     | 0   | 0      | rds | suc    | 0      |\n/// | 0x16 | 0x3e | 0x3e      | returndatacopy |     |      |     |     |        |     | suc    | 0      |\n/// | 0x17 | 0x90 | 0x90      | swap1          |     |      |     |     |        |     | 0      | suc    |\n/// | 0x18 | 0x3d | 0x3d      | returndatasize |     |      |     |     |        | rds | 0      | suc    |\n/// | 0x19 | 0x91 | 0x91      | swap2          |     |      |     |     |        | suc | 0      | rds    |\n/// | 0x1a | 0x60 | 0x601e    | push1 0x1e     |     |      |     |     | 0x1e   | suc | 0      | rds    |\n/// | 0x1c | 0x57 | 0x57      | jumpi          |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1d | 0xfd | 0xfd      | revert         |     |      |     |     |        |     |        |        |\n/// | 0x1e | 0x5b | 0x5b      | jumpdest       |     |      |     |     |        |     | 0      | rds    |\n/// | 0x1f | 0xf3 | 0xf3      | return         |     |      |     |     |        |     |        |        |\n/// \u003e - Opcode + Args refers to the bytecode of the opcode and its arguments (if there are any).\n/// \u003e - Stack View (S7..S0) is shown after the execution of the opcode.\n/// \u003e - The stack elements are shown from top to bottom.\n/// \u003e Opcodes are typically dealing with the top stack elements, so they are shown first.\n/// \u003e - `cds` refers to the calldata size.\n/// \u003e - `rds` refers to the returndata size (which is zero before the first external call).\n/// \u003e - `val` refers to the provided `msg.value`.\n/// \u003e - `addr` refers to the target address loaded from calldata.\n/// \u003e - `gas` refers to the return value of the `gas()` opcode: the amount of gas left.\n/// \u003e - `suc` refers to the return value of the `call()` opcode: 0 on failure, 1 on success.\n/// ## Bytecode Explanation\n/// - `0x00..0x03` - Calculate the offset of the payload in the calldata (first 32 bytes is target address).\n/// \u003e - `sub` pops the top two stack items, subtracts them, and pushes the result onto the stack.\n/// - `0x04..0x04` - Duplicate the offset to use it later as \"payload length\".\n/// \u003e - `dup1` duplicates the top stack item.\n/// - `0x05..0x08` - Copy the target call payload to memory.\n/// \u003e - `calldatacopy` copies a portion of the calldata to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, calldata offset to read from, and length of the data to copy.\n/// - `0x09..0x11` - Prepare the stack for the `call` opcode.\n/// \u003e - We are putting an extra zero on the stack to use it later on, as `returndatacopy` will not return zero\n/// \u003e after we perform the first external call.\n/// \u003e - `swap3` swaps the top stack item with the fourth stack item.\n/// \u003e - `callvalue` pushes `msg.value` onto the stack.\n/// \u003e - `calldataload` pushes a word (32 bytes) onto the stack from calldata. Pops the calldata offset from the stack.\n/// \u003e Writes the word from calldata to the stack. We are using offset==0 to load the target address.\n/// \u003e - `gas` pushes the remaining gas onto the stack.\n/// - `0x12..0x12` - Call the target contract.\n/// \u003e - `call` issues an external call to a target address.\n/// \u003e -  Pops seven top stack items: gas, target address, value, input offset, input length,\n/// \u003e memory offset to write return data to, and length of return data to write to memory.\n/// \u003e - Pushes on stack: 0 on failure, 1 on success.\n/// - `0x13..0x16` - Copy the return data to memory.\n/// \u003e - `returndatasize` pushes the size of the returned data from the external call onto the stack.\n/// \u003e - `dup3` duplicates the third stack item.\n/// \u003e - `returncopydata` copies a portion of the returned data to memory. Pops three top stack elements:\n/// \u003e memory offset to write to, return data offset to read from, and length of the data to copy.\n/// - `0x17..0x1b` - Prepare the stack for either revert or return: jump dst, success flag, zero, and return data size.\n/// \u003e - `swap1` swaps the top stack item with the second stack item.\n/// \u003e - `swap2` swaps the top stack item with the third stack item.\n/// \u003e - `0x1e` refers to the position of the `jumpdest` opcode.\n/// \u003e  It is used to jump to the `return` opcode, if call was successful.\n/// - `0x1c..0x1c` - Jump to 0x1e position, if call was successful.\n/// \u003e - `jumpi` pops two top stack items: jump destination and jump condition.\n/// \u003e If jump condition is nonzero, jumps to the jump destination.\n/// - `0x1d..0x1d` - Revert if call was unsuccessful.\n/// \u003e - `revert` pops two top stack items: memory offset to read revert message from and length of the revert message.\n/// \u003e - This allows us to bubble the revert message from the external call.\n/// - `0x1e..0x1e` - Jump destination for successful call.\n/// \u003e - `jumpdest` is a no-op that marks a valid jump destination.\n/// - `0x1f..0x1f` - Return if call was successful.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to reuse the return data from the external call.\n/// # Minimal Forwarder Init Code\n/// Inspired by [Create3 Init Code](https://github.com/0xSequence/create3/blob/master/contracts/Create3.sol).\n/// Following changes were made:\n/// - Adjusted bytecode length to 32 bytes.\n/// - Replaced second PUSH1 opcode with RETURNDATASIZE to push 0 onto the stack.\n/// \u003e `bytecode` refers to the bytecode specified in the above table.\n/// ## Init Code Table\n/// | Pos  | OP   | OP + Args | Description     | S1  | S0       |\n/// | ---- | ---- | --------- | --------------- | --- | -------- |\n/// | 0x00 | 0x7f | 0x7fXXXX  | push32 bytecode |     | bytecode |\n/// | 0x1b | 0x3d | 0x3d      | returndatasize  | 0   | bytecode |\n/// | 0x1c | 0x52 | 0x52      | mstore          |     |          |\n/// | 0x1d | 0x60 | 0x6020    | push1 0x20      |     | 32       |\n/// | 0x1f | 0x3d | 0x3d      | returndatasize  | 0   | 32       |\n/// | 0x20 | 0xf3 | 0xf3      | return          |     |          |\n/// \u003e Init Code is executed when a contract is deployed. The returned value is saved as the contract code.\n/// \u003e Therefore, the init code is constructed in such a way that it returns the Minimal Forwarder bytecode.\n/// ## Init Code Explanation\n/// - `0x00..0x1a` - Push the Minimal Forwarder bytecode onto the stack.\n/// \u003e - `push32` pushes 32 bytes as a single stack item onto the stack.\n/// - `0x1b..0x1b` - Push 0 onto the stack.\n/// \u003e No external calls were made, so the return data size is 0.\n/// - `0x1c..0x1c` - Write the Minimal Forwarder bytecode to memory.\n/// \u003e - `mstore` pops two top stack items: memory offset to write to and value to write.\n/// \u003e - Minimal Forwarder bytecode is 32 bytes long, so we need a single `mstore` to write it to memory.\n/// - `0x1d..0x1f` - Prepare stack for `return` opcode.\n/// \u003e - We need to put `0 32` on the stack in order to return first 32 bytes of memory.\n/// - `0x20..0x20` - Return the Minimal Forwarder bytecode.\n/// \u003e - `return` pops two top stack items: memory offset to read return data from and length of the return data.\n/// \u003e - This allows us to return the Minimal Forwarder bytecode.\nlibrary MinimalForwarderLib {\n    using Address for address;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Minimal Forwarder deployed bytecode. See the above table for more details.\n    bytes internal constant FORWARDER_BYTECODE =\n        hex\"60_20_36_03_80_60_20_3d_37_3d_3d_3d_92_3d_34_3d_35_5a_f1_3d_82_80_3e_90_3d_91_60_1e_57_fd_5b_f3\";\n\n    /// @notice Init code to deploy a minimal forwarder contract.\n    bytes internal constant FORWARDER_INIT_CODE = abi.encodePacked(hex\"7f\", FORWARDER_BYTECODE, hex\"3d_52_60_20_3d_f3\");\n\n    /// @notice Hash of the minimal forwarder init code. Used to predict the address of a deployed forwarder.\n    bytes32 internal constant FORWARDER_INIT_CODE_HASH = keccak256(FORWARDER_INIT_CODE);\n\n    /// @notice Deploys a minimal forwarder contract using `CREATE2` with a given salt.\n    /// @dev Will revert if the salt is already used.\n    /// @param salt         The salt to use for the deployment\n    /// @return forwarder   The address of the deployed minimal forwarder\n    function deploy(bytes32 salt) internal returns (address forwarder) {\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        bytes memory initCode = FORWARDER_INIT_CODE;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Deploy the minimal forwarder with our pre-made bytecode via CREATE2.\n            // We add 0x20 to get the location where the init code starts.\n            forwarder := create2(0, add(initCode, 0x20), mload(initCode), salt)\n        }\n        // Deploy fails if the given salt is already used.\n        if (forwarder == address(0)) {\n            revert ForwarderDeploymentFailed();\n        }\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @return returnData  The return data from the target contract\n    function forwardCall(\n        address forwarder,\n        address target,\n        bytes memory payload\n    ) internal returns (bytes memory returnData) {\n        // Forward a call without any ETH value\n        returnData = forwardCallWithValue(forwarder, target, payload, 0);\n    }\n\n    /// @notice Forwards a call to a target address using a minimal forwarder with the given `msg.value`.\n    /// @dev Will bubble up any revert messages from the target.\n    /// @param forwarder    The address of the minimal forwarder to use\n    /// @param target       The address of the target contract to call\n    /// @param payload      The payload to pass to the target contract\n    /// @param value        The amount of ETH to send with the call\n    /// @return returnData  The return data from the target contract\n    function forwardCallWithValue(\n        address forwarder,\n        address target,\n        bytes memory payload,\n        uint256 value\n    ) internal returns (bytes memory returnData) {\n        // The payload to pass to the forwarder:\n        // 1. First 32 bytes is the encoded target address\n        // 2. The rest is the encoded payload to pass to the target\n        returnData = forwarder.functionCallWithValue(abi.encodePacked(target.addressToBytes32(), payload), value);\n    }\n\n    /// @notice Predicts the address of a minimal forwarder contract deployed using `deploy()`.\n    /// @param deployer     The address of the deployer of the minimal forwarder\n    /// @param salt         The salt to use for the deployment\n    /// @return The predicted address of the minimal forwarder deployed with the given salt\n    function predictAddress(address deployer, bytes32 salt) internal pure returns (address) {\n        return keccak256(abi.encodePacked(hex\"ff\", deployer, salt, FORWARDER_INIT_CODE_HASH)).bytes32ToAddress();\n    }\n}\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length \u003e 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ncontract SynapseCCTP is SynapseCCTPEvents, ISynapseCCTP {\n    using MinimalForwarderLib for address;\n    using SafeERC20 for IERC20;\n    using TypeCasts for address;\n    using TypeCasts for bytes32;\n\n    /// @notice Struct defining the configuration of a remote domain that has SynapseCCTP deployed.\n    /// @dev CCTP uses the following convention for domain numbers:\n    /// - 0: Ethereum Mainnet\n    /// - 1: Avalanche Mainnet\n    /// With more chains added, the convention will be extended.\n    /// @param domain       Value for the remote domain used in CCTP messages.\n    /// @param synapseCCTP  Address of the SynapseCCTP deployed on the remote chain.\n    struct DomainConfig {\n        uint32 domain;\n        address synapseCCTP;\n    }\n\n    /// @notice Refers to the local domain number used in CCTP messages.\n    uint32 public immutable localDomain;\n    IMessageTransmitter public immutable messageTransmitter;\n    ITokenMessenger public immutable tokenMessenger;\n\n    // TODO: onlyOwner setters for these\n    // (chainId =\u003e configuration of the remote chain)\n    mapping(uint256 =\u003e DomainConfig) public remoteDomainConfig;\n    mapping(uint256 =\u003e address) internal _remoteTokenIdToLocalToken;\n\n    constructor(ITokenMessenger tokenMessenger_) {\n        tokenMessenger = tokenMessenger_;\n        messageTransmitter = IMessageTransmitter(tokenMessenger_.localMessageTransmitter());\n        localDomain = messageTransmitter.localDomain();\n    }\n\n    // ═════════════════════════════════════════════ SET CONFIG LOGIC ══════════════════════════════════════════════════\n\n    /// @notice Sets the local token associated with the given remote domain and token.\n    // TODO: add ownerOnly modifier\n    function setLocalToken(uint32 remoteDomain, address remoteToken) external {\n        ITokenMinter minter = ITokenMinter(tokenMessenger.localMinter());\n        address localToken = minter.getLocalToken(remoteDomain, remoteToken.addressToBytes32());\n        if (localToken == address(0)) revert LocalCCTPTokenNotFound();\n        _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)] = localToken;\n    }\n\n    /// @notice Sets the remote domain and deployment of SynapseCCTP for the given remote chainId.\n    // TODO: add ownerOnly modifier\n    function setRemoteDomainConfig(\n        uint256 remoteChainId,\n        uint32 remoteDomain,\n        address remoteSynapseCCTP\n    ) external {\n        // TODO: add zero checks\n        remoteDomainConfig[remoteChainId] = DomainConfig(remoteDomain, remoteSynapseCCTP);\n    }\n\n    // ════════════════════════════════════════════════ CCTP LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc ISynapseCCTP\n    function sendCircleToken(\n        address recipient,\n        uint256 chainId,\n        address burnToken,\n        uint256 amount,\n        uint32 requestVersion,\n        bytes memory swapParams\n    ) external {\n        // Pull token from user and update the amount if case of transfer fee.\n        amount = _pullToken(burnToken, amount);\n        uint64 nonce = messageTransmitter.nextAvailableNonce();\n        // This will revert if the request version is not supported, or swap params are not properly formatted.\n        bytes memory formattedRequest = RequestLib.formatRequest(\n            requestVersion,\n            RequestLib.formatBaseRequest(localDomain, nonce, burnToken, amount, recipient),\n            swapParams\n        );\n        DomainConfig memory config = remoteDomainConfig[chainId];\n        bytes32 dstSynapseCCTP = config.synapseCCTP.addressToBytes32();\n        if (dstSynapseCCTP == 0) revert RemoteCCTPDeploymentNotSet();\n        uint32 destinationDomain = config.domain;\n        // Construct the request identifier to be used as salt later.\n        // The identifier (kappa) is unique for every single request on all the chains.\n        // This is done by including origin and destination domains as well as origin nonce in the hashed data.\n        // Origin domain and nonce are included in `formattedRequest`, so we only need to add the destination domain.\n        bytes32 kappa = _kappa(destinationDomain, requestVersion, formattedRequest);\n        // Issue allowance if needed\n        _approveToken(burnToken, amount);\n        tokenMessenger.depositForBurnWithCaller(\n            amount,\n            destinationDomain,\n            dstSynapseCCTP,\n            burnToken,\n            _destinationCaller(dstSynapseCCTP.bytes32ToAddress(), kappa)\n        );\n        emit CircleRequestSent(chainId, nonce, burnToken, amount, requestVersion, formattedRequest, kappa);\n    }\n\n    // TODO: guard this to be only callable by the validators?\n    /// @inheritdoc ISynapseCCTP\n    function receiveCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        uint32 requestVersion,\n        bytes memory formattedRequest\n    ) external {\n        // This will revert if the request version is not supported, or request is not properly formatted.\n        Request request = RequestLib.wrapRequest(requestVersion, formattedRequest);\n        // For kappa hashing we use origin and destination domains as well as origin nonce.\n        // This ensures that kappa is unique for each request, and that it is not possible to replay requests.\n        bytes32 kappa = _kappa(localDomain, requestVersion, formattedRequest);\n        // Kindly ask the Circle Bridge to mint the tokens for us.\n        _mintCircleToken(message, signature, kappa);\n        (address token, uint256 amount) = _getMintedToken(request);\n        uint256 fee;\n        // Apply the bridging fee. This will revert if amount \u003c= fee.\n        (amount, fee) = _applyFee(token, amount);\n        // Fulfill the request: perform an optional swap and send the end tokens to the recipient.\n        (address recipient, address tokenOut, uint256 amountOut) = _fulfillRequest(token, amount, request);\n        emit CircleRequestFulfilled(recipient, token, fee, tokenOut, amountOut, kappa);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @notice Get the local token associated with the given remote domain and token.\n    function getLocalToken(uint32 remoteDomain, address remoteToken) external view returns (address) {\n        return _remoteTokenIdToLocalToken[_remoteTokenId(remoteDomain, remoteToken)];\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Applies the bridging fee. Will revert if amount \u003c= fee.\n    function _applyFee(address token, uint256 amount) internal returns (uint256 amountAfterFee, uint256 fee) {\n        // TODO: implement actual fee logic\n        return (amount, 0);\n    }\n\n    /// @dev Approves the token to be transferred to the Circle Bridge.\n    function _approveToken(address token, uint256 amount) internal {\n        uint256 allowance = IERC20(token).allowance(address(this), address(tokenMessenger));\n        if (allowance \u003c amount) {\n            // Reset allowance to 0 before setting it to the new value.\n            if (allowance != 0) IERC20(token).safeApprove(address(tokenMessenger), 0);\n            IERC20(token).safeApprove(address(tokenMessenger), type(uint256).max);\n        }\n    }\n\n    /// @dev Pulls the token from the sender.\n    function _pullToken(address token, uint256 amount) internal returns (uint256 amountPulled) {\n        uint256 balanceBefore = IERC20(token).balanceOf(address(this));\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        amountPulled = IERC20(token).balanceOf(address(this)) - balanceBefore;\n    }\n\n    /// @dev Mints the Circle token by sending the message and signature to the Circle Bridge.\n    function _mintCircleToken(\n        bytes calldata message,\n        bytes calldata signature,\n        bytes32 kappa\n    ) internal {\n        // Deploy a forwarder specific to this request. Will revert if the kappa has been used before.\n        address forwarder = MinimalForwarderLib.deploy(kappa);\n        // Form the payload for the Circle Bridge.\n        bytes memory payload = abi.encodeWithSelector(IMessageTransmitter.receiveMessage.selector, message, signature);\n        // Use the deployed forwarder (who is the only one who can call the Circle Bridge for this message)\n        // This will revert if the provided message is not properly formatted, or if the signatures are invalid.\n        bytes memory returnData = forwarder.forwardCall(address(messageTransmitter), payload);\n        // messageTransmitter.receiveMessage is supposed to return true if the message was received.\n        if (!abi.decode(returnData, (bool))) revert CCTPMessageNotReceived();\n    }\n\n    /// @dev Performs a swap, if was requested back on origin chain, and transfers the tokens to the recipient.\n    /// Should the swap fail, will transfer `token` to the recipient instead.\n    function _fulfillRequest(\n        address token,\n        uint256 amount,\n        Request request\n    )\n        internal\n        returns (\n            address recipient,\n            address tokenOut,\n            uint256 amountOut\n        )\n    {\n        // TODO: implement swap logic\n        recipient = request.recipient();\n        tokenOut = token;\n        amountOut = amount;\n        IERC20(token).safeTransfer(recipient, amount);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Fetches the address and the amount of the minted Circle token.\n    function _getMintedToken(Request request) internal view returns (address token, uint256 amount) {\n        uint32 originDomain;\n        address originBurnToken;\n        (originDomain, , originBurnToken, amount) = request.originData();\n        // Map the remote token to the local token.\n        token = _remoteTokenIdToLocalToken[_remoteTokenId(originDomain, originBurnToken)];\n        if (token == address(0)) revert RemoteCCTPTokenNotSet();\n    }\n\n    /// @dev Predicts the address of the destination caller.\n    function _destinationCaller(address synapseCCTP, bytes32 kappa) internal pure returns (bytes32) {\n        return synapseCCTP.predictAddress(kappa).addressToBytes32();\n    }\n\n    /// @dev Calculates the unique identifier of the request.\n    function _kappa(\n        uint32 destinationDomain,\n        uint32 requestVersion,\n        bytes memory request\n    ) internal pure returns (bytes32 kappa) {\n        // Merge the destination domain and the request version into a single uint256.\n        uint256 prefix = (uint256(destinationDomain) \u003c\u003c 32) | requestVersion;\n        bytes32 requestHash = keccak256(request);\n        // Use assembly to return hash of the prefix and the request hash.\n        // We are using scratch space to avoid unnecessary memory expansion.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Store prefix in memory at 0, and requestHash at 32.\n            mstore(0, prefix)\n            mstore(32, requestHash)\n            // Return hash of first 64 bytes of memory.\n            kappa := keccak256(0, 64)\n        }\n    }\n\n    /// @dev Packs the domain and the token into a single uint256 value using bitwise operations.\n    function _remoteTokenId(uint32 remoteDomain, address remoteToken) internal pure returns (uint256) {\n        return (uint256(remoteDomain) \u003c\u003c 160) | uint160(remoteToken);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"25459:350:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;25459:350:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"25459:350:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SynapseCCTP.sol\":\"TypeCasts\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SynapseCCTP.sol\":{\"keccak256\":\"0x55fa73f28749c8729656735aa5882c5bcd7f68d3d622e7e14c423e1e4dbdaf44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f563d7a8609976fe89a6a61857387590dd8bb84a6f3844c06da261d04a8bf865\",\"dweb:/ipfs/QmXtXKaZYSap5cijVai3P7Atrq8wKXKZTEMpTsZYCMiErc\"]}},\"version\":1}"},"hashes":{}}}