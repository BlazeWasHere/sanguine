{"version":3,"file":"sdk-router.cjs.development.js","sources":["../src/utils/handleNativeToken.ts","../src/constants/index.ts","../src/synapseRouter.ts","../src/sdk.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts"],"sourcesContent":["import { AddressZero } from '@ethersproject/constants'\n\nexport const ETH_NATIVE_TOKEN_ADDRESS =\n  '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'\n\nexport const handleNativeToken = (tokenAddr: string) => {\n  return tokenAddr === '' || tokenAddr === AddressZero\n    ? ETH_NATIVE_TOKEN_ADDRESS\n    : tokenAddr\n}\n","import JSBI from 'jsbi'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nexport enum SupportedChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  CRONOS = 25,\n  BSC = 56,\n  POLYGON = 137,\n  FANTOM = 250,\n  BOBA = 288,\n  METIS = 1088,\n  MOONBEAM = 1284,\n  MOONRIVER = 1285,\n  DOGECHAIN = 2000,\n  CANTO = 7700,\n  KLAYTN = 8217,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  DFK = 53935,\n  AURORA = 1313161554,\n  HARMONY = 1666600000,\n}\n\nexport const ROUTER_ADDRESS: object = {\n  [SupportedChainId.BSC]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.ETH]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.POLYGON]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.BOBA]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.MOONBEAM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.MOONRIVER]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.ARBITRUM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.OPTIMISM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.AVALANCHE]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.DFK]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.FANTOM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.HARMONY]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.AURORA]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.CRONOS]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.METIS]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.KLAYTN]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.DOGECHAIN]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.CANTO]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n}\n\n// exports for external consumption\nexport type BigintIsh = JSBI | BigNumber | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n","import { Interface } from '@ethersproject/abi'\nimport { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/abstract-provider'\nimport { BytesLike } from '@ethersproject/bytes'\nimport invariant from 'tiny-invariant'\nimport { PopulatedTransaction } from 'ethers'\n\nimport abi from './abi/SynapseRouter.json'\nimport { BigintIsh, ROUTER_ADDRESS } from './constants'\nimport { SynapseRouter as SynapseRouterContract } from './typechain/SynapseRouter'\nexport class SynapseRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n  public readonly chainId: number\n  public readonly provider: Provider\n  public readonly routerContract: SynapseRouterContract\n\n  constructor(chainId: number, provider: Provider) {\n    invariant(chainId !== undefined, 'CHAIN_ID_UNDEFINED')\n    invariant(provider !== undefined, 'PROVIDER_UNDEFINED')\n    this.chainId = chainId\n    this.provider = provider\n    this.routerContract = new Contract(\n      ROUTER_ADDRESS[chainId as keyof object],\n      SynapseRouter.INTERFACE,\n      provider\n    ) as SynapseRouterContract\n  }\n\n  public async getAmountOut(\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<any> {\n    return this.routerContract.getAmountOut(tokenIn, tokenOut, amountIn)\n  }\n\n  public async getOriginAmountOut(\n    tokenIn: string,\n    bridgeTokens: string[],\n    amountIn: BigintIsh\n  ): Promise<any> {\n    return this.routerContract.getOriginAmountOut(\n      tokenIn,\n      bridgeTokens,\n      amountIn\n    )\n  }\n\n  public async getDestinationAmountOut(\n    requests: { symbol: string; amountIn: BigintIsh }[],\n    tokenOut: string\n  ): Promise<any> {\n    return this.routerContract.getDestinationAmountOut(requests, tokenOut)\n  }\n\n  public async getConnectedBridgeTokens(tokenOut: string): Promise<any> {\n    return this.routerContract.getConnectedBridgeTokens(tokenOut)\n  }\n\n  public async bridge(\n    to: string,\n    chainId: number,\n    token: string,\n    amount: BigintIsh,\n    originQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    },\n    destQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    return this.routerContract.populateTransaction.bridge(\n      to,\n      chainId,\n      token,\n      amount,\n      originQuery,\n      destQuery,\n      { value: 0 }\n    )\n  }\n}\n","import { Provider } from '@ethersproject/abstract-provider'\nimport invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BytesLike } from '@ethersproject/bytes'\nimport { PopulatedTransaction } from 'ethers'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Interface } from '@ethersproject/abi'\nimport { Contract } from '@ethersproject/contracts'\n\nimport {\n  handleNativeToken,\n  ETH_NATIVE_TOKEN_ADDRESS,\n} from './utils/handleNativeToken'\nimport { BigintIsh } from './constants'\nimport { SynapseRouter } from './synapseRouter'\nimport bridgeAbi from './abi/SynapseBridge.json'\n\ntype SynapseRouters = {\n  [key: number]: SynapseRouter\n}\n\ntype Query = [string, string, BigNumber, BigNumber, string] & {\n  swapAdapter: string\n  tokenOut: string\n  minAmountOut: BigNumber\n  deadline: BigNumber\n  rawParams: string\n}\n\ntype FeeConfig = [number, BigNumber, BigNumber] & {\n  bridgeFee: number\n  minFee: BigNumber\n  maxFee: BigNumber\n}\n\ntype PoolToken = { isWeth: boolean | undefined; token: string }\n\nclass SynapseSDK {\n  public synapseRouters: SynapseRouters\n  public providers: { [x: number]: Provider }\n  public bridgeAbi: Interface = new Interface(bridgeAbi)\n\n  constructor(chainIds: number[], providers: Provider[]) {\n    invariant(\n      chainIds.length === providers.length,\n      `Amount of chains and providers does not equal`\n    )\n    this.synapseRouters = {}\n    this.providers = {}\n    for (let i = 0; i < chainIds.length; i++) {\n      this.synapseRouters[chainIds[i]] = new SynapseRouter(\n        chainIds[i],\n        providers[i]\n      )\n      this.providers[chainIds[i]] = providers[i]\n    }\n  }\n\n  public async bridgeQuote(\n    originChainId: number,\n    destChainId: number,\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<{\n    feeAmount?: BigNumber | undefined\n    feeConfig?: FeeConfig | undefined\n    routerAddress?: string | undefined\n    maxAmountOut?: BigNumber | undefined\n    originQuery?: Query | undefined\n    destQuery?: Query | undefined\n  }> {\n    tokenOut = handleNativeToken(tokenOut)\n    tokenIn = handleNativeToken(tokenIn)\n    let originQuery\n    let destQuery\n    const originRouter: SynapseRouter = this.synapseRouters[originChainId]\n    const destRouter: SynapseRouter = this.synapseRouters[destChainId]\n\n    // Step 0: find connected bridge tokens on destination\n    const bridgeTokens =\n      await destRouter.routerContract.getConnectedBridgeTokens(tokenOut)\n\n    if (bridgeTokens.length === 0) {\n      throw Error('No bridge tokens found for this route')\n    }\n\n    const filteredTokens = bridgeTokens.filter(\n      (bridgeToken) =>\n        bridgeToken.symbol.length !== 0 && bridgeToken.token !== AddressZero\n    )\n\n    // Step 1: perform a call to origin SynapseRouter\n    const originQueries = await originRouter.routerContract.getOriginAmountOut(\n      tokenIn,\n      filteredTokens.map((bridgeToken) => bridgeToken.symbol),\n      amountIn\n    )\n\n    // Step 2: form a list of Destination Requests\n    // In practice, there is no need to pass the requests with amountIn = 0, but we will do it for code simplicity\n    const requests: { symbol: string; amountIn: BigintIsh }[] = []\n\n    for (let i = 0; i < filteredTokens.length; i++) {\n      requests.push({\n        symbol: filteredTokens[i].symbol,\n        amountIn: originQueries[i].minAmountOut,\n      })\n    }\n\n    // Step 3: perform a call to destination SynapseRouter\n    const destQueries = await destRouter.routerContract.getDestinationAmountOut(\n      requests,\n      tokenOut\n    )\n    // Step 4: find the best query (in practice, we could return them all)\n    let destInToken\n    let maxAmountOut: BigNumber = BigNumber.from(0)\n    for (let i = 0; i < destQueries.length; i++) {\n      if (destQueries[i].minAmountOut.gt(maxAmountOut)) {\n        maxAmountOut = destQueries[i].minAmountOut\n        originQuery = originQueries[i]\n        destQuery = destQueries[i]\n        destInToken = filteredTokens[i].token\n      }\n    }\n\n    // Get fee data\n    let feeAmount\n    let feeConfig\n\n    if (originQuery && destInToken) {\n      feeAmount = await destRouter.routerContract.calculateBridgeFee(\n        destInToken,\n        originQuery.minAmountOut\n      )\n      feeConfig = await destRouter.routerContract.fee(destInToken)\n    }\n\n    // Router address so allowance handling be set by client\n    const routerAddress = originRouter.routerContract.address\n\n    return {\n      feeAmount,\n      feeConfig,\n      routerAddress,\n      maxAmountOut,\n      originQuery,\n      destQuery,\n    }\n  }\n\n  public async bridge(\n    to: string,\n    originChainId: number,\n    destChainId: number,\n    token: string,\n    amount: BigintIsh,\n    originQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    },\n    destQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    token = handleNativeToken(token)\n    const originRouter: SynapseRouter = this.synapseRouters[originChainId]\n    return originRouter.routerContract.populateTransaction.bridge(\n      to,\n      destChainId,\n      token,\n      amount,\n      originQuery,\n      destQuery\n    )\n  }\n\n  // TODO: add gas from bridge\n  public async swapQuote(\n    chainId: number,\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<{\n    routerAddress?: string | undefined\n    maxAmountOut?: BigNumber | undefined\n    query?: Query | undefined\n  }> {\n    tokenOut = handleNativeToken(tokenOut)\n    tokenIn = handleNativeToken(tokenIn)\n\n    const router: SynapseRouter = this.synapseRouters[chainId]\n\n    // Step 0: get the swap quote\n    const query = await router.routerContract.getAmountOut(\n      tokenIn,\n      tokenOut,\n      amountIn\n    )\n\n    // Router address so allowance handling be set by client\n    const routerAddress = router.routerContract.address\n    const maxAmountOut = query.minAmountOut\n    return {\n      routerAddress,\n      maxAmountOut,\n      query,\n    }\n  }\n\n  public async swap(\n    chainId: number,\n    to: string,\n    token: string,\n    amount: BigintIsh,\n    query: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    token = handleNativeToken(token)\n    const originRouter: SynapseRouter = this.synapseRouters[chainId]\n    return originRouter.routerContract.populateTransaction.swap(\n      to,\n      token,\n      amount,\n      query\n    )\n  }\n  public async getBridgeGas(chainId: number): Promise<BigintIsh> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const bridgeAddress = await router.routerContract.synapseBridge()\n    const bridgeContract = new Contract(\n      bridgeAddress,\n      this.bridgeAbi,\n      this.providers[chainId]\n    )\n    return bridgeContract.chainGasAmount()\n  }\n\n  public async getPoolTokens(\n    chainId: number,\n    poolAddress: string\n  ): Promise<PoolToken[]> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const poolTokens = await router.routerContract.poolTokens(poolAddress)\n    return poolTokens.map((token) => {\n      return { token: token.token, isWeth: token?.isWeth }\n    })\n  }\n\n  public async getPoolInfo(\n    chainId: number,\n    poolAddress: string\n  ): Promise<{ tokens: BigNumber | undefined; lpToken: string | undefined }> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const poolInfo = await router.routerContract.poolInfo(poolAddress)\n    return { tokens: poolInfo?.[0], lpToken: poolInfo?.[1] }\n  }\n\n  public async getAllPools(chainId: number): Promise<\n    {\n      poolAddress: string | undefined\n      tokens: PoolToken[] | undefined\n      lpToken: string | undefined\n    }[]\n  > {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const pools = await router.routerContract.allPools()\n    const res = pools.map((pool) => {\n      return {\n        poolAddress: pool?.pool,\n        tokens: pool?.tokens.map((token) => {\n          return { token: token.token, isWeth: token?.isWeth }\n        }),\n        lpToken: pool?.lpToken,\n      }\n    })\n    return res\n  }\n\n  public async calculateAddLiquidity(\n    chainId: number,\n    poolAddress: string,\n    amounts: BigNumber[]\n  ): Promise<BigNumber> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    return router.routerContract.calculateAddLiquidity(poolAddress, amounts)\n  }\n\n  public async calculateRemoveLiquidity(\n    chainId: number,\n    poolAddress: string,\n    amount: BigNumber\n  ): Promise<BigNumber[]> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    return router.routerContract.calculateRemoveLiquidity(poolAddress, amount)\n  }\n}\n\nexport { SynapseSDK, ETH_NATIVE_TOKEN_ADDRESS }\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    ) {\n      return new Fraction(fractionish)\n    }\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) {\n      return fractionish\n    }\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   *\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   *\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) {\n      return this as CurrencyAmount<Token>\n    }\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n *\n * @param fraction the fraction to convert\n */\nconst toPercent = (fraction: Fraction): Percent =>\n  new Percent(fraction.numerator, fraction.denominator)\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   *\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   *\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   *\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   *\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   *\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   *\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n *\n * @param address the unchecksummed hex address\n */\nexport const validateAndParseAddress = (address: string): string => {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   *\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   *\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(\n    1,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  3: new Token(\n    3,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  4: new Token(\n    4,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  5: new Token(\n    5,\n    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  42: new Token(\n    42,\n    '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  10: new Token(\n    10,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  69: new Token(\n    69,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  42161: new Token(\n    42161,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  421611: new Token(\n    421611,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n"],"names":["ETH_NATIVE_TOKEN_ADDRESS","handleNativeToken","tokenAddr","AddressZero","SupportedChainId","ROUTER_ADDRESS","_ROUTER_ADDRESS","BSC","ETH","POLYGON","BOBA","MOONBEAM","MOONRIVER","ARBITRUM","OPTIMISM","AVALANCHE","DFK","FANTOM","HARMONY","AURORA","CRONOS","METIS","KLAYTN","DOGECHAIN","CANTO","TradeType","Rounding","MaxUint256","JSBI","BigInt","SynapseRouter","chainId","provider","undefined","process","invariant","routerContract","Contract","INTERFACE","_proto","prototype","getAmountOut","_getAmountOut","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tokenIn","tokenOut","amountIn","wrap","_callee$","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","arguments","getOriginAmountOut","_getOriginAmountOut","_callee2","bridgeTokens","_callee2$","_context2","_x4","_x5","_x6","getDestinationAmountOut","_getDestinationAmountOut","_callee3","requests","_callee3$","_context3","_x7","_x8","getConnectedBridgeTokens","_getConnectedBridgeTokens","_callee4","_callee4$","_context4","_x9","bridge","_bridge","_callee5","to","token","amount","originQuery","destQuery","_callee5$","_context5","populateTransaction","value","_x10","_x11","_x12","_x13","_x14","_x15","Interface","abi","SynapseSDK","chainIds","providers","bridgeAbi","length","synapseRouters","i","bridgeQuote","_bridgeQuote","originChainId","destChainId","originRouter","destRouter","filteredTokens","originQueries","destQueries","destInToken","maxAmountOut","_i","feeAmount","feeConfig","routerAddress","sent","Error","filter","bridgeToken","symbol","map","push","minAmountOut","BigNumber","from","gt","calculateBridgeFee","fee","address","swapQuote","_swapQuote","router","query","_x16","swap","_swap","_x17","_x18","_x19","_x20","_x21","getBridgeGas","_getBridgeGas","bridgeAddress","bridgeContract","synapseBridge","chainGasAmount","_x22","getPoolTokens","_getPoolTokens","_callee6","poolAddress","poolTokens","_callee6$","_context6","isWeth","_x23","_x24","getPoolInfo","_getPoolInfo","_callee7","poolInfo","_callee7$","_context7","tokens","lpToken","_x25","_x26","getAllPools","_getAllPools","_callee8","pools","res","_callee8$","_context8","allPools","pool","_x27","calculateAddLiquidity","_calculateAddLiquidity","_callee9","amounts","_callee9$","_context9","_x28","_x29","_x30","calculateRemoveLiquidity","_calculateRemoveLiquidity","_callee10","_callee10$","_context10","_x31","_x32","_x33","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","Token","sortsBefore","toLowerCase","WETH9","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9"],"mappings":"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"}