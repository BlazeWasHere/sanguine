import { Provider } from '@ethersproject/abstract-provider';
import { BigNumber } from '@ethersproject/bignumber';
import { BytesLike } from '@ethersproject/bytes';
import { PopulatedTransaction } from 'ethers';
import { Interface } from '@ethersproject/abi';
import { ETH_NATIVE_TOKEN_ADDRESS } from './utils/handleNativeToken';
import { BigintIsh } from './constants';
import { SynapseRouter } from './synapseRouter';
declare type SynapseRouters = {
    [key: number]: SynapseRouter;
};
declare type Query = [string, string, BigNumber, BigNumber, string] & {
    swapAdapter: string;
    tokenOut: string;
    minAmountOut: BigNumber;
    deadline: BigNumber;
    rawParams: string;
};
declare type FeeConfig = [number, BigNumber, BigNumber] & {
    bridgeFee: number;
    minFee: BigNumber;
    maxFee: BigNumber;
};
declare type PoolToken = {
    isWeth: boolean | undefined;
    token: string;
};
declare class SynapseSDK {
    synapseRouters: SynapseRouters;
    providers: {
        [x: number]: Provider;
    };
    bridgeAbi: Interface;
    constructor(chainIds: number[], providers: Provider[]);
    bridgeQuote(originChainId: number, destChainId: number, tokenIn: string, tokenOut: string, amountIn: BigintIsh): Promise<{
        feeAmount?: BigNumber | undefined;
        feeConfig?: FeeConfig | undefined;
        routerAddress?: string | undefined;
        maxAmountOut?: BigNumber | undefined;
        originQuery?: Query | undefined;
        destQuery?: Query | undefined;
    }>;
    bridge(to: string, originChainId: number, destChainId: number, token: string, amount: BigintIsh, originQuery: {
        swapAdapter: string;
        tokenOut: string;
        minAmountOut: BigintIsh;
        deadline: BigintIsh;
        rawParams: BytesLike;
    }, destQuery: {
        swapAdapter: string;
        tokenOut: string;
        minAmountOut: BigintIsh;
        deadline: BigintIsh;
        rawParams: BytesLike;
    }): Promise<PopulatedTransaction>;
    swapQuote(chainId: number, tokenIn: string, tokenOut: string, amountIn: BigintIsh): Promise<{
        routerAddress?: string | undefined;
        maxAmountOut?: BigNumber | undefined;
        query?: Query | undefined;
    }>;
    swap(chainId: number, to: string, token: string, amount: BigintIsh, query: {
        swapAdapter: string;
        tokenOut: string;
        minAmountOut: BigintIsh;
        deadline: BigintIsh;
        rawParams: BytesLike;
    }): Promise<PopulatedTransaction>;
    getBridgeGas(chainId: number): Promise<BigintIsh>;
    getPoolTokens(chainId: number, poolAddress: string): Promise<PoolToken[]>;
    getPoolInfo(chainId: number, poolAddress: string): Promise<{
        tokens: BigNumber | undefined;
        lpToken: string | undefined;
    }>;
    getAllPools(chainId: number): Promise<{
        poolAddress: string | undefined;
        tokens: PoolToken[] | undefined;
        lpToken: string | undefined;
    }[]>;
    calculateAddLiquidity(chainId: number, poolAddress: string, amounts: BigNumber[]): Promise<BigNumber>;
    calculateRemoveLiquidity(chainId: number, poolAddress: string, amount: BigNumber): Promise<BigNumber[]>;
}
export { SynapseSDK, ETH_NATIVE_TOKEN_ADDRESS };
