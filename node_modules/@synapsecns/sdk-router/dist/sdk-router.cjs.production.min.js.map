{"version":3,"file":"sdk-router.cjs.production.min.js","sources":["../src/constants/index.ts","../src/utils/handleNativeToken.ts","../src/synapseRouter.ts","../src/sdk.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts"],"sourcesContent":["import JSBI from 'jsbi'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nexport enum SupportedChainId {\n  ETH = 1,\n  OPTIMISM = 10,\n  CRONOS = 25,\n  BSC = 56,\n  POLYGON = 137,\n  FANTOM = 250,\n  BOBA = 288,\n  METIS = 1088,\n  MOONBEAM = 1284,\n  MOONRIVER = 1285,\n  DOGECHAIN = 2000,\n  CANTO = 7700,\n  KLAYTN = 8217,\n  ARBITRUM = 42161,\n  AVALANCHE = 43114,\n  DFK = 53935,\n  AURORA = 1313161554,\n  HARMONY = 1666600000,\n}\n\nexport const ROUTER_ADDRESS: object = {\n  [SupportedChainId.BSC]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.ETH]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.POLYGON]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.BOBA]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.MOONBEAM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.MOONRIVER]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.ARBITRUM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.OPTIMISM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.AVALANCHE]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.DFK]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.FANTOM]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.HARMONY]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.AURORA]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.CRONOS]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.METIS]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.KLAYTN]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.DOGECHAIN]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n  [SupportedChainId.CANTO]: '0x7E7A0e201FD38d3ADAA9523Da6C109a07118C96a',\n}\n\n// exports for external consumption\nexport type BigintIsh = JSBI | BigNumber | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT,\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP,\n}\n\nexport const MaxUint256 = JSBI.BigInt(\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n)\n","import { AddressZero } from '@ethersproject/constants'\n\nexport const ETH_NATIVE_TOKEN_ADDRESS =\n  '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE'\n\nexport const handleNativeToken = (tokenAddr: string) => {\n  return tokenAddr === '' || tokenAddr === AddressZero\n    ? ETH_NATIVE_TOKEN_ADDRESS\n    : tokenAddr\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/abstract-provider'\nimport { BytesLike } from '@ethersproject/bytes'\nimport invariant from 'tiny-invariant'\nimport { PopulatedTransaction } from 'ethers'\n\nimport abi from './abi/SynapseRouter.json'\nimport { BigintIsh, ROUTER_ADDRESS } from './constants'\nimport { SynapseRouter as SynapseRouterContract } from './typechain/SynapseRouter'\nexport class SynapseRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n  public readonly chainId: number\n  public readonly provider: Provider\n  public readonly routerContract: SynapseRouterContract\n\n  constructor(chainId: number, provider: Provider) {\n    invariant(chainId !== undefined, 'CHAIN_ID_UNDEFINED')\n    invariant(provider !== undefined, 'PROVIDER_UNDEFINED')\n    this.chainId = chainId\n    this.provider = provider\n    this.routerContract = new Contract(\n      ROUTER_ADDRESS[chainId as keyof object],\n      SynapseRouter.INTERFACE,\n      provider\n    ) as SynapseRouterContract\n  }\n\n  public async getAmountOut(\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<any> {\n    return this.routerContract.getAmountOut(tokenIn, tokenOut, amountIn)\n  }\n\n  public async getOriginAmountOut(\n    tokenIn: string,\n    bridgeTokens: string[],\n    amountIn: BigintIsh\n  ): Promise<any> {\n    return this.routerContract.getOriginAmountOut(\n      tokenIn,\n      bridgeTokens,\n      amountIn\n    )\n  }\n\n  public async getDestinationAmountOut(\n    requests: { symbol: string; amountIn: BigintIsh }[],\n    tokenOut: string\n  ): Promise<any> {\n    return this.routerContract.getDestinationAmountOut(requests, tokenOut)\n  }\n\n  public async getConnectedBridgeTokens(tokenOut: string): Promise<any> {\n    return this.routerContract.getConnectedBridgeTokens(tokenOut)\n  }\n\n  public async bridge(\n    to: string,\n    chainId: number,\n    token: string,\n    amount: BigintIsh,\n    originQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    },\n    destQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    return this.routerContract.populateTransaction.bridge(\n      to,\n      chainId,\n      token,\n      amount,\n      originQuery,\n      destQuery,\n      { value: 0 }\n    )\n  }\n}\n","import { Provider } from '@ethersproject/abstract-provider'\nimport invariant from 'tiny-invariant'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { BytesLike } from '@ethersproject/bytes'\nimport { PopulatedTransaction } from 'ethers'\nimport { AddressZero } from '@ethersproject/constants'\nimport { Interface } from '@ethersproject/abi'\nimport { Contract } from '@ethersproject/contracts'\n\nimport {\n  handleNativeToken,\n  ETH_NATIVE_TOKEN_ADDRESS,\n} from './utils/handleNativeToken'\nimport { BigintIsh } from './constants'\nimport { SynapseRouter } from './synapseRouter'\nimport bridgeAbi from './abi/SynapseBridge.json'\n\ntype SynapseRouters = {\n  [key: number]: SynapseRouter\n}\n\ntype Query = [string, string, BigNumber, BigNumber, string] & {\n  swapAdapter: string\n  tokenOut: string\n  minAmountOut: BigNumber\n  deadline: BigNumber\n  rawParams: string\n}\n\ntype FeeConfig = [number, BigNumber, BigNumber] & {\n  bridgeFee: number\n  minFee: BigNumber\n  maxFee: BigNumber\n}\n\ntype PoolToken = { isWeth: boolean | undefined; token: string }\n\nclass SynapseSDK {\n  public synapseRouters: SynapseRouters\n  public providers: { [x: number]: Provider }\n  public bridgeAbi: Interface = new Interface(bridgeAbi)\n\n  constructor(chainIds: number[], providers: Provider[]) {\n    invariant(\n      chainIds.length === providers.length,\n      `Amount of chains and providers does not equal`\n    )\n    this.synapseRouters = {}\n    this.providers = {}\n    for (let i = 0; i < chainIds.length; i++) {\n      this.synapseRouters[chainIds[i]] = new SynapseRouter(\n        chainIds[i],\n        providers[i]\n      )\n      this.providers[chainIds[i]] = providers[i]\n    }\n  }\n\n  public async bridgeQuote(\n    originChainId: number,\n    destChainId: number,\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<{\n    feeAmount?: BigNumber | undefined\n    feeConfig?: FeeConfig | undefined\n    routerAddress?: string | undefined\n    maxAmountOut?: BigNumber | undefined\n    originQuery?: Query | undefined\n    destQuery?: Query | undefined\n  }> {\n    tokenOut = handleNativeToken(tokenOut)\n    tokenIn = handleNativeToken(tokenIn)\n    let originQuery\n    let destQuery\n    const originRouter: SynapseRouter = this.synapseRouters[originChainId]\n    const destRouter: SynapseRouter = this.synapseRouters[destChainId]\n\n    // Step 0: find connected bridge tokens on destination\n    const bridgeTokens =\n      await destRouter.routerContract.getConnectedBridgeTokens(tokenOut)\n\n    if (bridgeTokens.length === 0) {\n      throw Error('No bridge tokens found for this route')\n    }\n\n    const filteredTokens = bridgeTokens.filter(\n      (bridgeToken) =>\n        bridgeToken.symbol.length !== 0 && bridgeToken.token !== AddressZero\n    )\n\n    // Step 1: perform a call to origin SynapseRouter\n    const originQueries = await originRouter.routerContract.getOriginAmountOut(\n      tokenIn,\n      filteredTokens.map((bridgeToken) => bridgeToken.symbol),\n      amountIn\n    )\n\n    // Step 2: form a list of Destination Requests\n    // In practice, there is no need to pass the requests with amountIn = 0, but we will do it for code simplicity\n    const requests: { symbol: string; amountIn: BigintIsh }[] = []\n\n    for (let i = 0; i < filteredTokens.length; i++) {\n      requests.push({\n        symbol: filteredTokens[i].symbol,\n        amountIn: originQueries[i].minAmountOut,\n      })\n    }\n\n    // Step 3: perform a call to destination SynapseRouter\n    const destQueries = await destRouter.routerContract.getDestinationAmountOut(\n      requests,\n      tokenOut\n    )\n    // Step 4: find the best query (in practice, we could return them all)\n    let destInToken\n    let maxAmountOut: BigNumber = BigNumber.from(0)\n    for (let i = 0; i < destQueries.length; i++) {\n      if (destQueries[i].minAmountOut.gt(maxAmountOut)) {\n        maxAmountOut = destQueries[i].minAmountOut\n        originQuery = originQueries[i]\n        destQuery = destQueries[i]\n        destInToken = filteredTokens[i].token\n      }\n    }\n\n    // Get fee data\n    let feeAmount\n    let feeConfig\n\n    if (originQuery && destInToken) {\n      feeAmount = await destRouter.routerContract.calculateBridgeFee(\n        destInToken,\n        originQuery.minAmountOut\n      )\n      feeConfig = await destRouter.routerContract.fee(destInToken)\n    }\n\n    // Router address so allowance handling be set by client\n    const routerAddress = originRouter.routerContract.address\n\n    return {\n      feeAmount,\n      feeConfig,\n      routerAddress,\n      maxAmountOut,\n      originQuery,\n      destQuery,\n    }\n  }\n\n  public async bridge(\n    to: string,\n    originChainId: number,\n    destChainId: number,\n    token: string,\n    amount: BigintIsh,\n    originQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    },\n    destQuery: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    token = handleNativeToken(token)\n    const originRouter: SynapseRouter = this.synapseRouters[originChainId]\n    return originRouter.routerContract.populateTransaction.bridge(\n      to,\n      destChainId,\n      token,\n      amount,\n      originQuery,\n      destQuery\n    )\n  }\n\n  // TODO: add gas from bridge\n  public async swapQuote(\n    chainId: number,\n    tokenIn: string,\n    tokenOut: string,\n    amountIn: BigintIsh\n  ): Promise<{\n    routerAddress?: string | undefined\n    maxAmountOut?: BigNumber | undefined\n    query?: Query | undefined\n  }> {\n    tokenOut = handleNativeToken(tokenOut)\n    tokenIn = handleNativeToken(tokenIn)\n\n    const router: SynapseRouter = this.synapseRouters[chainId]\n\n    // Step 0: get the swap quote\n    const query = await router.routerContract.getAmountOut(\n      tokenIn,\n      tokenOut,\n      amountIn\n    )\n\n    // Router address so allowance handling be set by client\n    const routerAddress = router.routerContract.address\n    const maxAmountOut = query.minAmountOut\n    return {\n      routerAddress,\n      maxAmountOut,\n      query,\n    }\n  }\n\n  public async swap(\n    chainId: number,\n    to: string,\n    token: string,\n    amount: BigintIsh,\n    query: {\n      swapAdapter: string\n      tokenOut: string\n      minAmountOut: BigintIsh\n      deadline: BigintIsh\n      rawParams: BytesLike\n    }\n  ): Promise<PopulatedTransaction> {\n    token = handleNativeToken(token)\n    const originRouter: SynapseRouter = this.synapseRouters[chainId]\n    return originRouter.routerContract.populateTransaction.swap(\n      to,\n      token,\n      amount,\n      query\n    )\n  }\n  public async getBridgeGas(chainId: number): Promise<BigintIsh> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const bridgeAddress = await router.routerContract.synapseBridge()\n    const bridgeContract = new Contract(\n      bridgeAddress,\n      this.bridgeAbi,\n      this.providers[chainId]\n    )\n    return bridgeContract.chainGasAmount()\n  }\n\n  public async getPoolTokens(\n    chainId: number,\n    poolAddress: string\n  ): Promise<PoolToken[]> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const poolTokens = await router.routerContract.poolTokens(poolAddress)\n    return poolTokens.map((token) => {\n      return { token: token.token, isWeth: token?.isWeth }\n    })\n  }\n\n  public async getPoolInfo(\n    chainId: number,\n    poolAddress: string\n  ): Promise<{ tokens: BigNumber | undefined; lpToken: string | undefined }> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const poolInfo = await router.routerContract.poolInfo(poolAddress)\n    return { tokens: poolInfo?.[0], lpToken: poolInfo?.[1] }\n  }\n\n  public async getAllPools(chainId: number): Promise<\n    {\n      poolAddress: string | undefined\n      tokens: PoolToken[] | undefined\n      lpToken: string | undefined\n    }[]\n  > {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    const pools = await router.routerContract.allPools()\n    const res = pools.map((pool) => {\n      return {\n        poolAddress: pool?.pool,\n        tokens: pool?.tokens.map((token) => {\n          return { token: token.token, isWeth: token?.isWeth }\n        }),\n        lpToken: pool?.lpToken,\n      }\n    })\n    return res\n  }\n\n  public async calculateAddLiquidity(\n    chainId: number,\n    poolAddress: string,\n    amounts: BigNumber[]\n  ): Promise<BigNumber> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    return router.routerContract.calculateAddLiquidity(poolAddress, amounts)\n  }\n\n  public async calculateRemoveLiquidity(\n    chainId: number,\n    poolAddress: string,\n    amount: BigNumber\n  ): Promise<BigNumber[]> {\n    const router: SynapseRouter = this.synapseRouters[chainId]\n    return router.routerContract.calculateRemoveLiquidity(poolAddress, amount)\n  }\n}\n\nexport { SynapseSDK, ETH_NATIVE_TOKEN_ADDRESS }\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp,\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(\n    numerator: BigintIsh,\n    denominator: BigintIsh = JSBI.BigInt(1)\n  ) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (\n      fractionish instanceof JSBI ||\n      typeof fractionish === 'number' ||\n      typeof fractionish === 'string'\n    ) {\n      return new Fraction(fractionish)\n    }\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) {\n      return fractionish\n    }\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(\n      JSBI.remainder(this.numerator, this.denominator),\n      this.denominator\n    )\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.add(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(\n        JSBI.subtract(this.numerator, otherParsed.numerator),\n        this.denominator\n      )\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(significantDigits),\n      `${significantDigits} is not an integer.`\n    )\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding],\n    })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(\n      Number.isInteger(decimalPlaces),\n      `${decimalPlaces} is not an integer.`\n    )\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   *\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(\n    currency: T,\n    rawAmount: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   *\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(\n    currency: T,\n    numerator: BigintIsh,\n    denominator?: BigintIsh\n  ) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(\n      JSBI.BigInt(10),\n      JSBI.BigInt(currency.decimals)\n    )\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      added.numerator,\n      added.denominator\n    )\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      subtracted.numerator,\n      subtracted.denominator\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      multiplied.numerator,\n      multiplied.denominator\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency,\n      divided.numerator,\n      divided.denominator\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super\n      .divide(this.decimalScale)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super\n      .divide(this.decimalScale)\n      .toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString())\n      .div(this.decimalScale.toString())\n      .toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) {\n      return this as CurrencyAmount<Token>\n    }\n    return CurrencyAmount.fromFractionalAmount(\n      this.currency.wrapped,\n      this.numerator,\n      this.denominator\n    )\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n *\n * @param fraction the fraction to convert\n */\nconst toPercent = (fraction: Fraction): Percent =>\n  new Percent(fraction.numerator, fraction.denominator)\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(\n    significantDigits: number = 5,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super\n      .multiply(ONE_HUNDRED)\n      .toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = 2,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<\n  TBase extends Currency,\n  TQuote extends Currency\n> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   *\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [\n          {\n            baseAmount: CurrencyAmount<TBase>\n            quoteAmount: CurrencyAmount<TQuote>\n          }\n        ]\n  ) {\n    let baseCurrency: TBase\n    let quoteCurrency: TQuote\n    let denominator: BigintIsh\n    let numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator,\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(\n      this.quoteCurrency,\n      this.baseCurrency,\n      this.numerator,\n      this.denominator\n    )\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   *\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(\n    other: Price<TQuote, TOtherQuote>\n  ): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(\n      this.baseCurrency,\n      other.quoteCurrency,\n      fraction.denominator,\n      fraction.numerator\n    )\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   *\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(\n      this.quoteCurrency,\n      result.numerator,\n      result.denominator\n    )\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   *\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toSignificant(\n      significantDigits,\n      format,\n      rounding\n    )\n  }\n\n  public toFixed(\n    decimalPlaces: number = 4,\n    format?: object,\n    rounding?: Rounding\n  ): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   *\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(\n    chainId: number,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(\n      decimals >= 0 && decimals < 255 && Number.isInteger(decimals),\n      'DECIMALS'\n    )\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   *\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n *\n * @param address the unchecksummed hex address\n */\nexport const validateAndParseAddress = (address: string): string => {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(\n    chainId: number,\n    address: string,\n    decimals: number,\n    symbol?: string,\n    name?: string\n  ) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   *\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return (\n      other.isToken &&\n      this.chainId === other.chainId &&\n      this.address === other.address\n    )\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   *\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  1: new Token(\n    1,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  3: new Token(\n    3,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  4: new Token(\n    4,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  5: new Token(\n    5,\n    '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  42: new Token(\n    42,\n    '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  10: new Token(\n    10,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  69: new Token(\n    69,\n    '0x4200000000000000000000000000000000000006',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n\n  42161: new Token(\n    42161,\n    '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  421611: new Token(\n    421611,\n    '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n}\n","import invariant from 'tiny-invariant'\n\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return (\n      this._etherCache[chainId] ??\n      (this._etherCache[chainId] = new Ether(chainId))\n    )\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n"],"names":["SupportedChainId","handleNativeToken","tokenAddr","AddressZero","TradeType","Rounding","ROUTER_ADDRESS","_ROUTER_ADDRESS","BSC","ETH","POLYGON","BOBA","MOONBEAM","MOONRIVER","ARBITRUM","OPTIMISM","AVALANCHE","DFK","FANTOM","HARMONY","AURORA","CRONOS","METIS","KLAYTN","DOGECHAIN","CANTO","MaxUint256","JSBI","BigInt","SynapseRouter","chainId","provider","undefined","invariant","this","routerContract","Contract","INTERFACE","_proto","prototype","getAmountOut","_getAmountOut","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tokenIn","tokenOut","amountIn","wrap","_context","prev","next","abrupt","stop","_x","_x2","_x3","apply","arguments","getOriginAmountOut","_getOriginAmountOut","_callee2","bridgeTokens","_context2","_x4","_x5","_x6","getDestinationAmountOut","_getDestinationAmountOut","_callee3","requests","_context3","_x7","_x8","getConnectedBridgeTokens","_getConnectedBridgeTokens","_callee4","_context4","_x9","bridge","_bridge","_callee5","to","token","amount","originQuery","destQuery","_context5","populateTransaction","value","_x10","_x11","_x12","_x13","_x14","_x15","Interface","abi","SynapseSDK","chainIds","providers","bridgeAbi","length","synapseRouters","i","bridgeQuote","_bridgeQuote","originChainId","destChainId","originRouter","destRouter","filteredTokens","originQueries","destQueries","destInToken","maxAmountOut","_i","feeAmount","feeConfig","sent","Error","filter","bridgeToken","symbol","map","push","minAmountOut","BigNumber","from","gt","calculateBridgeFee","fee","routerAddress","address","swapQuote","_swapQuote","router","query","_x16","swap","_swap","_x17","_x18","_x19","_x20","_x21","getBridgeGas","_getBridgeGas","bridgeContract","synapseBridge","chainGasAmount","_x22","getPoolTokens","_getPoolTokens","_callee6","poolAddress","_context6","poolTokens","isWeth","_x23","_x24","getPoolInfo","_getPoolInfo","_callee7","poolInfo","_context7","tokens","lpToken","_x25","_x26","getAllPools","_getAllPools","_callee8","res","_context8","allPools","pool","_x27","calculateAddLiquidity","_calculateAddLiquidity","_callee9","amounts","_context9","_x28","_x29","_x30","calculateRemoveLiquidity","_calculateRemoveLiquidity","_callee10","_context10","_x31","_x32","_x33","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","decimals","_inheritsLoose","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","_len","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","name","isSafeInteger","NativeCurrency","_BaseCurrency","validateAndParseAddress","getAddress","error","Token","sortsBefore","toLowerCase","WETH9","1","3","4","5","42","10","69","42161","421611","Ether","_NativeCurrency","onChain","_this$_etherCache$cha","_etherCache","isNative","weth9"],"mappings":"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"}