import { Interface } from '@ethersproject/abi';
import { Provider } from '@ethersproject/abstract-provider';
import { BytesLike } from '@ethersproject/bytes';
import { PopulatedTransaction } from 'ethers';
import { BigintIsh } from './constants';
import { SynapseRouter as SynapseRouterContract } from './typechain/SynapseRouter';
export declare class SynapseRouter {
    static INTERFACE: Interface;
    readonly chainId: number;
    readonly provider: Provider;
    readonly routerContract: SynapseRouterContract;
    constructor(chainId: number, provider: Provider);
    getAmountOut(tokenIn: string, tokenOut: string, amountIn: BigintIsh): Promise<any>;
    getOriginAmountOut(tokenIn: string, bridgeTokens: string[], amountIn: BigintIsh): Promise<any>;
    getDestinationAmountOut(requests: {
        symbol: string;
        amountIn: BigintIsh;
    }[], tokenOut: string): Promise<any>;
    getConnectedBridgeTokens(tokenOut: string): Promise<any>;
    bridge(to: string, chainId: number, token: string, amount: BigintIsh, originQuery: {
        swapAdapter: string;
        tokenOut: string;
        minAmountOut: BigintIsh;
        deadline: BigintIsh;
        rawParams: BytesLike;
    }, destQuery: {
        swapAdapter: string;
        tokenOut: string;
        minAmountOut: BigintIsh;
        deadline: BigintIsh;
        rawParams: BytesLike;
    }): Promise<PopulatedTransaction>;
}
